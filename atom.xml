<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HK.C]]></title>
  <subtitle><![CDATA[成功的道路上并不拥挤，因为根本就不会有几个人坚持下来]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-07-20T06:11:40.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[耳东程]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Redis 批量插入]]></title>
    <link href="http://yoursite.com/2015/07/19/Redis-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    <id>http://yoursite.com/2015/07/19/Redis-批量插入/</id>
    <published>2015-07-19T10:43:43.000Z</published>
    <updated>2015-07-20T06:11:40.000Z</updated>
    <content type="html"><![CDATA[<p>有时候，一些redis用例需要在短时间内插入大量已有或由用户临时生成的数据，导致百万级的键-值对需要在尽可能短的时间内创建。</p>
<p>这就称作<em>批量插入</em>，这篇文档的目的就是探讨如何尽可能快的向redis插入数据。</p>
<h3 id="使用protocol"><strong> <em>使用protocol</em> </strong></h3><p>因为某些原因，通过一个普通的redis客户端来实现数据的批量插入并不可取，比如：一个很小白的方式就是一个命令接一个命令的发送，这样会很慢，因为每个命令都会消耗一个回路时间（因为redis是一个client-server模式的应用，客户端和服务器可能隔了十万八千里）。这种情况也许可以通过使用管道方式（<a href="http://redis.io/topics/pipelining" target="_blank" rel="external">pipeling</a>）来解决，但是对于大量数据的批量插入，往往需要读取返回值的同时创建新命令，还要确保尽可能快的插入。</p>
<p>只有少量的客户端支持非阻塞I/O（貌似是说大多数redis客户端是单线程的），并且并不是所有的客户端都有能力以一种有效的方式解析返回数据以实现吞吐量的最大化。由于上面的一些原因，向redis批量插入数据的首选方式便是生成一个包含redis协议的文件，以RAW（一个没有被NT文件系统（FAT或NTFS）格式化的磁盘分区）形式格式化，以便调用相关的命令插入请求数据。</p>
<p>举例来说，我需要生成大量的set格式数据，其中包含数以亿计的’keyN-&gt;valueN’形式的键值，我会创建一个基于Redis协议格式的包含如下命令的文件：</p>
<pre><code><span class="built_in">SET</span> Key0 Value0
<span class="built_in">SET</span> Key1 Value1
<span class="attribute">...</span>
<span class="built_in">SET</span> KeyN ValueN
</code></pre><p><em>注意：<br>　　用shell组成上面格式的数据后，用redis-cli —pipe方式导入，报如下错误<br>　　All data transferred. Waiting for the last reply…<br>　　ERR syntax error<br>　　Last reply received from server.<br>　　errors: 1, replies: 1<br>　　经调查是因为linux文档的换行是\n,但文档要求每行的结尾是\r\n.<br>　　最后用unix2dos命令将文件转换后，再执行redis-cli —pipe，不再出现错误</em></p>
<p>一旦文件创建，接下来的事情就是尽可能快的插入到 Redis 里。过去的实现方式，是使用如下 netcat 命令：</p>
<pre><code>(cat data.txt; sleep <span class="number">10</span>) | nc localhost <span class="number">6379</span> &gt; <span class="regexp">/dev/</span><span class="keyword">null</span>
</code></pre><p>然而这并不是一个实现数据批量插入的可靠方式，是因为 necat 无法确切的知道数据何时传输完毕，并且不能查错。在2.6或者以后的Redis版本里，客户端可以支持一种叫做管道模式（ pipe mode ）的新模式，用来处理批量插入。</p>
<p>可以使用类似下面的pipe model 命令：</p>
<pre><code><span class="title">cat</span> <span class="typedef"><span class="keyword">data</span>.txt | redis-cli <span class="comment">--pipe</span></span>
</code></pre><p>会产生如下类似输出：</p>
<pre><code>All data transferred. Waiting <span class="keyword">for</span> <span class="operator">the</span> <span class="keyword">last</span> reply...
Last reply recived <span class="built_in">from</span> server.
Erroe: <span class="number">0</span>, replies: <span class="number">100000</span>
</code></pre><p>拥有这种模式的redis-cli同时会确保只把从Redis服务收到的错误信息输出。</p>
<h3 id="Redis_protocol的生成"><strong> <em>Redis protocol的生成</em> </strong></h3><p>Redis协议生成和解析都是十分简单的，参考文档请点击<a href="http://redis.io/topics/protocol" target="_blank" rel="external">这里</a>。然而你并不需要理解为批量插入而生成的协议的每个细节，其中的每个命令仅以如下方式呈现：</p>
<pre><code><span class="keyword">*</span><span class="variable">&lt;args&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
$<span class="variable">&lt;len&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args0&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args1&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args2&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
...
<span class="variable">&lt;argsN&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
</code></pre><p>这里的<code>&lt;cr&gt;</code>代表”\r”(或者是ASII码 13)， <code>&lt;lf&gt;</code>代表”\n”(或者是ASII码 10)。</p>
<p>举个例子，<strong>SET key value</strong>命令可以用一下协议表示：</p>
<pre><code>*<span class="number">3</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$3</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
SET<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$4</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
name<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$5</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
lunar<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
</code></pre><p><em>格式说明：
　　</em>*3 #表示有3个参数<br>　　$3 #表示“参数”有三个字节<br>　　SET #执行的命令<br>　　$34 # key有 4个字节<br>　　name #key对应的值<br>　　$5 #field对应的长度<br>　　lunar #field对应的值<br>　　每行默认以 \r\n 结尾<br>　　同时在执行完一行后，以 \r\n 代码一条语句结束*</p>
<p>或者用一串字符串来表示：</p>
<pre><code>"*3<span class="command">\r</span><span class="command">\n</span><span class="formula">$3<span class="command">\r</span><span class="command">\nSET</span><span class="command">\r</span><span class="command">\n</span>$</span>3<span class="command">\r</span><span class="command">\nkey</span><span class="command">\r</span><span class="command">\n</span><span class="formula">$5<span class="command">\r</span><span class="command">\nvalue</span><span class="command">\r</span><span class="command">\n</span>"</span>
</code></pre><p>你生成的用于批量插入的文件，就是由上面的命令一个接一个的构成的。</p>
<p>下面的Ruby函数可以用来生成一个有效的协议：</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">gen_redis_proto</span></span>(*cmd)
    proto = <span class="string">""</span>
    proto &lt;&lt; <span class="string">"*"</span> + cmd.lenght.to_s + <span class="string">"\r\n"</span>
    cmd.each{|arg|
        proto &lt;&lt; <span class="string">"$"</span> + arg.to_s.bytesize.to_s +<span class="string">"\r\n"</span>
        proto &lt;&lt; arg.to_s + <span class="string">"\r\n"</span>
    }
    proto
<span class="keyword">end</span>
puts gen_redis_proto(<span class="string">"SET"</span>, <span class="string">"mykey"</span>, <span class="string">"Hello World!"</span>).inspect
</code></pre><p>使用上述方法我们可以很容易的生成上述键值对，函数用法如下：</p>
<pre><code>(<span class="number">0.</span>..<span class="number">1000</span>).each{|n|
    STDOUT.write(gen_redis_proto(<span class="string">"SET"</span>, <span class="string">"mykey<span class="subst">#{n}</span>"</span>, <span class="string">"Hello World<span class="subst">#{n}</span>"</span>))
}
</code></pre><p>我们可以通过redis-cli的pipe直接执行上述程序，来实现大规模导入。</p>
<pre><code>$ ruby proto.rb | redis-cli <span class="comment">--pipe</span>
All data transferred. Waiting <span class="keyword">for</span> <span class="operator">the</span> <span class="keyword">last</span> reply...
Last reply received <span class="built_in">from</span> server.
errors: <span class="number">0</span>, replies: <span class="number">1000</span>
</code></pre><h3 id="Redis引擎下_pipe_mode_是怎样工作的"><strong> <em>Redis引擎下 pipe mode 是怎样工作的</em> </strong></h3><p>redis-cli内置的 pipe mode 的神奇之处在于，能够像netcat一样快，与此同时还能捕捉到服务器返回的最后一条数据。</p>
<p>好处如下：</p>
<ul>
<li><code>redis-cli --pipe</code> 尝试尽可能快的向服务器发送数据。</li>
<li>同时读取可用数据并解析。</li>
<li>一旦输出接口没有多余的可读数据，它就发送一个20bytes长度特殊<em>ECHO</em>命令：我们可以确定这就是最后一个命令，如果我们收到了一个同样的20bytes的返回值，我们就可以匹配到这个检测用的返回值。</li>
<li>一旦这个特殊命令发送，返回值接收代码就会匹配这个20bytes的返回值，一旦匹配成功就可以退出进程。</li>
</ul>
<p>使用这个方法，我们就不需要解析为了统计命令数量而发送到服务器的协议，而是紧紧解析返回值。</p>
<p>然而，我们还是设置了一个计数器，来统计解析的返回值数量，以便告诉用户有多少条命令发送到服务器。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候，一些redis用例需要在短时间内插入大量已有或由用户临时生成的数据，导致百万级的键-值对需要在尽可能短的时间内创建。</p>
<p>这就称作<em>批量插入</em>，这篇文档的目的就是探讨如何尽可能快的向redis插入数据。</p>
<h3 id="使用proto]]>
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php7]]></title>
    <link href="http://yoursite.com/2015/07/19/php7/"/>
    <id>http://yoursite.com/2015/07/19/php7/</id>
    <published>2015-07-19T10:20:07.000Z</published>
    <updated>2015-07-19T10:39:31.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="php7" scheme="http://yoursite.com/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随笔]]></title>
    <link href="http://yoursite.com/2015/07/19/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2015/07/19/随笔/</id>
    <published>2015-07-19T09:58:06.000Z</published>
    <updated>2015-07-19T10:03:23.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python]]></title>
    <link href="http://yoursite.com/2015/07/19/python/"/>
    <id>http://yoursite.com/2015/07/19/python/</id>
    <published>2015-07-19T09:57:28.000Z</published>
    <updated>2015-07-19T10:03:55.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis]]></title>
    <link href="http://yoursite.com/2015/07/19/redis/"/>
    <id>http://yoursite.com/2015/07/19/redis/</id>
    <published>2015-07-19T09:57:15.000Z</published>
    <updated>2015-07-19T10:04:01.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2]]></title>
    <link href="http://yoursite.com/2015/07/19/yii2/"/>
    <id>http://yoursite.com/2015/07/19/yii2/</id>
    <published>2015-07-19T09:56:02.000Z</published>
    <updated>2015-07-19T10:04:15.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql]]></title>
    <link href="http://yoursite.com/2015/07/19/mysql/"/>
    <id>http://yoursite.com/2015/07/19/mysql/</id>
    <published>2015-07-19T09:55:46.000Z</published>
    <updated>2015-07-19T10:03:41.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php5]]></title>
    <link href="http://yoursite.com/2015/07/19/php5/"/>
    <id>http://yoursite.com/2015/07/19/php5/</id>
    <published>2015-07-19T09:55:28.000Z</published>
    <updated>2015-07-19T10:03:47.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="php5" scheme="http://yoursite.com/tags/php5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[归去来兮辞]]></title>
    <link href="http://yoursite.com/2015/05/25/%E5%BD%92%E5%8E%BB%E6%9D%A5%E5%85%AE%E8%BE%9E/"/>
    <id>http://yoursite.com/2015/05/25/归去来兮辞/</id>
    <published>2015-05-25T15:54:46.000Z</published>
    <updated>2015-07-19T10:03:32.000Z</updated>
    <content type="html"><![CDATA[<h4 id="东晋_陶渊明"><strong>东晋 陶渊明</strong></h4><p>　　归去来兮，田园将芜胡不归！既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者可追；实迷途其未远，觉今是而昨非。</p>
<p>　　舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜；倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关；策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还；景翳翳以将入，抚孤松而盘桓。</p>
<p>　　归去来兮，请息交以绝游。世与我而相违，复驾言兮焉求！悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经丘。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。</p>
<p>　　已矣乎！寓形宇内复几时，曷不委心任去留，胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐夫天命复奚疑！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="东晋_陶渊明"><strong>东晋 陶渊明</strong></h4><p>　　归去来兮，田园将芜胡不归！既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者可追；实迷途其未远，觉今是而昨非。</p>
<p>　　舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo for GitHub]]></title>
    <link href="http://yoursite.com/2015/05/04/Hexo-for-GitHub/"/>
    <id>http://yoursite.com/2015/05/04/Hexo-for-GitHub/</id>
    <published>2015-05-04T14:49:31.000Z</published>
    <updated>2015-07-17T17:01:24.000Z</updated>
    <content type="html"><![CDATA[<p><strong>这是粗体</strong></p>
<p><strong>这还是粗体</strong></p>
<p><em>这是斜体</em></p>
<p><em>还是还是斜体</em></p>
<p><em>还可以<br>跨行哦</em></p>
<p>分割线来了</p>
<hr>
<blockquote>
<p>这里是引用的一段话</p>
</blockquote>
<h1 id="大标题">大标题</h1><h2 id="小标题">小标题</h2><h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h6 id="六级标题">六级标题</h6><ul>
<li>原来这就是传输中ul&gt;li标签</li>
<li>还必须有空格<ul>
<li>嵌套一下</li>
</ul>
<ul>
<li>再来一下</li>
</ul>
<ul>
<li>又嵌套了</li>
</ul>
</li>
</ul>
<p>这是<a href="http://www.google.com" target="_blank" rel="external">Baidu</a></p>
<!-- ￼0 -->
<pre><code>val s = <span class="string">"hello Markdown"</span>
<span class="function"><span class="title">println</span><span class="params">( s )</span></span>
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = <span class="constant">Redcarpet</span>.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure>
<h2 id="下面是MarkDown语法">下面是MarkDown语法</h2><p>这是一段代码</p>
<pre><code>{
    <span class="string">'redis'</span>:<span class="string">'get'</span>,
    <span class="string">'name'</span>:<span class="string">'cjnchk'</span>,
    <span class="string">'age'</span>:<span class="string">'18'</span>
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[Hexo安装及GitHub部署]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/05/04/hello-world/"/>
    <id>http://yoursite.com/2015/05/04/hello-world/</id>
    <published>2015-05-04T14:40:02.000Z</published>
    <updated>2015-05-04T14:40:02.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>