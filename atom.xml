<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HK.C]]></title>
  <subtitle><![CDATA[折腾是生命的自然属性]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-20T07:27:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[耳东程]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[rust translation]]></title>
    <link href="http://yoursite.com/2015/11/20/rust-translation/"/>
    <id>http://yoursite.com/2015/11/20/rust-translation/</id>
    <published>2015-11-20T07:27:03.000Z</published>
    <updated>2015-11-20T07:27:33.000Z</updated>
    <content type="html"><![CDATA[<p>Mutability, 改变某个事物的能力，在Rust中的表现与其他语言有所不同。第一个方面就是没有默认状态：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x =</span> <span class="number">5</span>;</span><br><span class="line"><span class="variable">x =</span> <span class="number">6</span>;  // error!</span><br></pre></td></tr></table></figure>
<p>我们可以通过<code>mut</code>关键字来声明：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mut <span class="variable">x =</span> <span class="number">5</span>;</span><br><span class="line"><span class="variable">x =</span> <span class="number">6</span>; // no problem!</span><br></pre></td></tr></table></figure>
<p>这是一个可变的变量绑定。当绑定是可变的时候，意味着你可以改变此绑定。所以在上面的例子中，<code>x</code>可以从一个值变为另一个值。</p>
<p>如果你想</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mutability, 改变某个事物的能力，在Rust中的表现与其他语言有所不同。第一个方面就是没有默认状态：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class=]]>
    </summary>
    
      <category term="rust" scheme="http://yoursite.com/categories/rust/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yaf]]></title>
    <link href="http://yoursite.com/2015/11/18/yaf/"/>
    <id>http://yoursite.com/2015/11/18/yaf/</id>
    <published>2015-11-18T15:14:08.000Z</published>
    <updated>2015-11-18T15:14:23.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="yaf" scheme="http://yoursite.com/categories/yaf/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2过滤器：Filters]]></title>
    <link href="http://yoursite.com/2015/08/27/yii2%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%9AFilters/"/>
    <id>http://yoursite.com/2015/08/27/yii2过滤器：Filters/</id>
    <published>2015-08-27T12:59:58.000Z</published>
    <updated>2015-08-29T11:26:28.000Z</updated>
    <content type="html"><![CDATA[<p>过滤器是一种运行于控制器动作之前或之后的对象。例如，运行于动作之前，用于确认终端用户是否有权访问的访问控制过滤器；运行与动作之后，用于压缩输出的内容压缩过滤器。</p>
<p>过滤器通常包含前置过滤器和后置过滤器。</p>
<h2 id="过滤器的使用"><strong>过滤器的使用</strong></h2><p>过滤器实际是一类特殊的行为（behaviors）。因此，过滤器的使用跟行为的使用是一样的。我们可以通过重写控制器类中<code>behaviors()</code>方法来声明过滤器，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\filters\HttpCache'</span>,</span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'index'</span>, <span class="string">'view'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$action</span>, <span class="variable">$params</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$q</span> = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$q</span>-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认情况下，在控制器类中声明的过滤器会应用到当前控制器下的所有动作。But，我们可以通过配置<code>only</code>属性来指定当前过滤器应用的动作，如上例。我们也可以通过配置<code>except</code>属性来指出哪些动作不应用于当前过滤器。<br><a id="more"></a><br>除在控制器内以外，我们还可以在应用或模块内声明过滤器。如此以来过滤器将应用于当前应用或模块的所有控制器动作，除非在<code>only</code>或<code>except</code>中配置。</p>
<h5 id="注意：在模块或应用中声明过滤器，配置only或except属性时应当使用路由而非动作ID。因为单纯的一个动作ID无明确当前应用或模块范围内的动作。"><em>注意：在模块或应用中声明过滤器，配置<code>only</code>或<code>except</code>属性时应当使用路由而非动作ID。因为单纯的一个动作ID无明确当前应用或模块范围内的动作。</em></h5><p>当多个过滤器共同作用于一个动作时，他们会按照如下规则顺序执行：</p>
<ul>
<li>前置过滤器<ul>
<li>应用中的过滤器，按照<code>behaviors()</code>中列表正序依次作用</li>
<li>模块中的过滤器，按照<code>behaviors()</code>中列表正序依次作用</li>
<li>控制器中的过滤器，按照<code>behaviors()</code>中列表正序依次作用</li>
<li>如果这些过滤其中的任何一个取消了动作的执行，那么之后的所有过滤器都将不再起作用，包括前置和后置过滤器。</li>
</ul>
</li>
<li>如果动作通过了所有过滤，那么动作将会执行。</li>
<li>后置过滤器<ul>
<li>控制器中的过滤器，按照<code>behaviors()</code>中列表逆序依次作用</li>
<li>模块中的过滤器，按照<code>behaviors()</code>中列表逆序依次作用</li>
<li>应用中的过滤器，按照<code>behaviors()</code>中列表逆序依次作用</li>
</ul>
</li>
</ul>
<h2 id="创建过滤器"><strong>创建过滤器</strong></h2><p>为了创建动作过滤器，需要继承<code>yii\base\ActionFilter</code>并且重写<code>beforeAction()</code>和<code>afterAction()</code>两个方法，这两个方法分别作用于动作执行前和执行后。<code>beforeAction()</code>的返回值决定了动作是否执行，如果其返回<code>false</code>，动作将不会执行，后之过滤器也不会起作用。</p>
<p>下面是一个记录动作执行时间的过滤器：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_startTime</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">(<span class="variable">$action</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction(<span class="variable">$action</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">(<span class="variable">$action</span>, <span class="variable">$result</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$time</span> = microtime(<span class="keyword">true</span>) - <span class="variable">$this</span>-&gt;_startTime;</span><br><span class="line">        Yii::trace(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction(<span class="variable">$action</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="核心过滤器"><strong> 核心过滤器 </strong></h2><p>Yii提供了许多常见的过滤器，主要构建在<code>yii\filters</code>命名空间下，下面将做一些简单介绍。</p>
<h3 id="访问控制"><strong> 访问控制 </strong></h3><p>访问控制过滤器提供基于规则的简单访问控制功能。通常，动作执行前，访问控制器会检查规则，并且找到一个能够匹配当前内容的变量，次规则将将决定动作是否执行，如果没有规则匹配到，访问将被阻止。</p>
<p>下面的例子展示了授权用户访问<code>create</code>、<code>update</code>动作，非授权用户则无访问。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">AccessControl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'access'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(),</span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'create'</span>, <span class="string">'update'</span>],</span><br><span class="line">            <span class="string">'rules'</span> =&gt; [</span><br><span class="line">                <span class="comment">// allow authenticated users</span></span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// everything else is denied by default</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于访问控制的跟多细节参考<a href="http://www.yiiframework.com/doc-2.0/guide-security-authorization.html" target="_blank" rel="external">身份验证</a>章节。</p>
<h4 id="身份验证过滤器"><strong>身份验证过滤器</strong></h4><p>身份验证过滤器使用多种方式来验证用户，例如<code>HTTP Basic Auth</code>，<code>OAuth 2</code>。所有这些过滤类都位于<code>yii\filters\auth</code>命名空间下。<br>下面的例子介绍了如何通过<code>yii\filters\auth\HttpBasicAuth</code>利用用户token通过HTTP Basic Auth方法验证用户是否有操作权限。 要注意的是，为了是上面的方法正常工作，需要在用户验证类（<a href="http://www.yiiframework.com/doc-2.0/yii-web-user.html#$identityClass-detail" target="_blank" rel="external">user identity class </a>）里实现<code>findIdentityByAccessToken()</code>方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">auth</span>\<span class="title">HttpBasicAuth</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'basicAuth'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; HttpBasicAuth::className(),</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>身份验证过滤器通常用作实现RESTful(<a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">表现层状态转化</a>) APIs，具体参考RESTful <a href="http://www.yiiframework.com/doc-2.0/guide-rest-authentication.html" target="_blank" rel="external">Authentication</a>章节。</p>
<h3 id="内容判定（ContentNegotiator）"><strong>内容判定（ContentNegotiator）</strong></h3><p>内容判定支持返回数据格式判定，应用语言判定。他会通过检查<code>GET</code>参和<code>HTTP</code>决定返回什么样的数据格式和语言。<br>下面的例子，内容判定器支持格式化<code>json</code>和<code>xml</code>类型数据，English和German语言。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">ContentNegotiator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Response</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; ContentNegotiator::className(),</span><br><span class="line">            <span class="string">'formats'</span> =&gt; [</span><br><span class="line">                <span class="string">'application/json'</span> =&gt; Response::FORMAT_JSON,</span><br><span class="line">                <span class="string">'application/xml'</span> =&gt; Response::FORMAT_XML,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'languages'</span> =&gt; [</span><br><span class="line">                <span class="string">'en-US'</span>,</span><br><span class="line">                <span class="string">'de'</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在应用生命周期内，返回数据格式和语言应当尽早确定。因此，内容判定器更应该作为启动引导组件，而不仅仅是一个过滤器。下面是一个在应用配置中配置的例子。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">ContentNegotiator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Response</span>;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    <span class="string">'bootstrap'</span> =&gt; [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; ContentNegotiator::className(),</span><br><span class="line">            <span class="string">'formats'</span> =&gt; [</span><br><span class="line">                <span class="string">'application/json'</span> =&gt; Response::FORMAT_JSON,</span><br><span class="line">                <span class="string">'application/xml'</span> =&gt; Response::FORMAT_XML,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'languages'</span> =&gt; [</span><br><span class="line">                <span class="string">'en-US'</span>,</span><br><span class="line">                <span class="string">'de'</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p><em>注意：当应用无法通过请求判定内容类型和语言时，列表中排在首位的内容类型和语言格式将被使用。</em></p>
<h3 id="HttpCache"><strong>HttpCache</strong></h3><p>HttpCache利用HTTP头的<code>Last-Modified</code>、<code>Etag</code>是客户端的缓存，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">HttpCache</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; HttpCache::className(),</span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'index'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$action</span>, <span class="variable">$params</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$q</span> = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$q</span>-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>具体应用细节参考<a href="http://www.yiiframework.com/doc-2.0/guide-caching-http.html" target="_blank" rel="external">HTTP Caching</a>章节。</p>
<h3 id="PageCache"><strong>PageCache</strong></h3><p>PageCache实现服务器端的整页缓存。PageCache被用于<code>index</code>动作上，以实现全页面的最大60s缓存，或者改变，也可根据应用的语言来存储多个对应版本。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">PageCache</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">caching</span>\<span class="title">DbDependency</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'pageCache'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; PageCache::className(),</span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'index'</span>],</span><br><span class="line">            <span class="string">'duration'</span> =&gt; <span class="number">60</span>,</span><br><span class="line">            <span class="string">'dependency'</span> =&gt; [</span><br><span class="line">                <span class="string">'class'</span> =&gt; DbDependency::className(),</span><br><span class="line">                <span class="string">'sql'</span> =&gt; <span class="string">'SELECT COUNT(*) FROM post'</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'variations'</span> =&gt; [</span><br><span class="line">                \Yii::<span class="variable">$app</span>-&gt;language,</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>具体应用细节参考<a href="http://www.yiiframework.com/doc-2.0/guide-caching-page.html" target="_blank" rel="external">Page Caching</a>章节。</p>
<h3 id="限速（RateLimiter）"><strong>限速（RateLimiter）</strong></h3><p>RateLimiter基于<a href="http://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="external">漏桶算法</a>（leaky bucklet algorithm）实现了一个限速算法。主要用来实现RESTful APIs，具体应用细节参考<a href="http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html" target="_blank" rel="external">Rate Limiter</a>章节。</p>
<h3 id="数据提交动作过滤（VerbFilter）"><strong>数据提交动作过滤（VerbFilter）</strong></h3><p>VerbFilter检查HTTP提交动作是否允许应到具体action。如果不允许，将会抛出HTTP 405异常。例如，通过VerbFIlter声明CRUD操作允许的请求方式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">VerbFilter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'verbs'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; VerbFilter::className(),</span><br><span class="line">            <span class="string">'actions'</span> =&gt; [</span><br><span class="line">                <span class="string">'index'</span>  =&gt; [<span class="string">'get'</span>],</span><br><span class="line">                <span class="string">'view'</span>   =&gt; [<span class="string">'get'</span>],</span><br><span class="line">                <span class="string">'create'</span> =&gt; [<span class="string">'get'</span>, <span class="string">'post'</span>],</span><br><span class="line">                <span class="string">'update'</span> =&gt; [<span class="string">'get'</span>, <span class="string">'put'</span>, <span class="string">'post'</span>],</span><br><span class="line">                <span class="string">'delete'</span> =&gt; [<span class="string">'post'</span>, <span class="string">'delete'</span>],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="跨域资源共享（CORS：Cross-Origin_Resource_Sharing_）"><strong>跨域资源共享（CORS：Cross-Origin Resource Sharing ）</strong></h3><p>跨域资源共享是一个允许外站访问本站资源的资源共享机制。比如，JS的Ajax调用就可以利用XMLHttpRquest机制。基于同源策略，类似这样的跨站请求会被WEB浏览器禁止。CORS定义了一种浏览器和服务器可以直接决定是否允许跨站请求的方式。<br>Cores Filter应该定义在Authentication/Authorization Filter之前，以便CORS头能够发送。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">Cors</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">ArrayHelper</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ArrayHelper::merge([</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; Cors::className(),</span><br><span class="line">        ],</span><br><span class="line">    ], <span class="keyword">parent</span>::behaviors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Cors Filter可以通过cors属性作调整：</p>
<ul>
<li><code>cors[&#39;Origin&#39;]</code>：此数组定义允许访问的源。可以是<code>[&#39;*&#39;]</code>(所有人)或者<code>[&#39;http://www.myserver.net&#39;, &#39;http://www.myotherserver.com&#39;]</code>。默认<code>[&#39;*&#39;]</code></li>
<li><code>cors[&#39;Access-Control-Request-Method&#39;]</code>：此数组定义允许访问的动作，例如<code>[&#39;GET&#39;, &#39;OPTIONS&#39;, &#39;HEAD&#39;]</code>，默认<code>[&#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, &#39;DELETE&#39;, &#39;HEAD&#39;, &#39;OPTIONS&#39;]</code></li>
<li><code>cors[&#39;Access-Control-Request-Headers&#39;]</code>：此数组定义允许访问的头。可以是<code>[&#39;*&#39;]</code>，代表所有头，或者指定为<code>[&#39;X-Request-With&#39;]</code>。默认<code>[&#39;*&#39;]</code></li>
<li><code>cors[&#39;Access-Control-Allow-Credentials&#39;]</code>：定义当前请求是否需要被验证。可以是<code>true</code>、<code>false</code>或<code>null</code>（未设置）。默认<code>null</code></li>
<li><code>cors[&#39;Access-Control-Max-Age&#39;]</code>： pre-flight请求生命周期。默认<code>86400</code></li>
</ul>
<p>例如，CORS允许站点：<code>http://www.myserver.net</code>，通过<code>GET</code>、<code>HEAD</code>、<code>OPTIONS</code>方式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">Cors</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">ArrayHelper</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ArrayHelper::merge([</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; Cors::className(),</span><br><span class="line">            <span class="string">'cors'</span> =&gt; [</span><br><span class="line">                <span class="string">'Origin'</span> =&gt; [<span class="string">'http://www.myserver.net'</span>],</span><br><span class="line">                <span class="string">'Access-Control-Request-Method'</span> =&gt; [<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ], <span class="keyword">parent</span>::behaviors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你可以在某一个action的基础上通过覆盖默认参数来调整CORS头，例如，可通过如下方式为<code>login</code>动作添加<code>Access-Control-Allow-Credentials</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">Cors</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">ArrayHelper</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ArrayHelper::merge([</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; Cors::className(),</span><br><span class="line">            <span class="string">'cors'</span> =&gt; [</span><br><span class="line">                <span class="string">'Origin'</span> =&gt; [<span class="string">'http://www.myserver.net'</span>],</span><br><span class="line">                <span class="string">'Access-Control-Request-Method'</span> =&gt; [<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>],</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'actions'</span> =&gt; [</span><br><span class="line">                <span class="string">'login'</span> =&gt; [</span><br><span class="line">                    <span class="string">'Access-Control-Allow-Credentials'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">    ], <span class="keyword">parent</span>::behaviors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>过滤器是一种运行于控制器动作之前或之后的对象。例如，运行于动作之前，用于确认终端用户是否有权访问的访问控制过滤器；运行与动作之后，用于压缩输出的内容压缩过滤器。</p>
<p>过滤器通常包含前置过滤器和后置过滤器。</p>
<h2 id="过滤器的使用"><strong>过滤器的使用</strong></h2><p>过滤器实际是一类特殊的行为（behaviors）。因此，过滤器的使用跟行为的使用是一样的。我们可以通过重写控制器类中<code>behaviors()</code>方法来声明过滤器，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\filters\HttpCache'</span>,</span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'index'</span>, <span class="string">'view'</span>],</span><br><span class="line">            <span class="string">'lastModified'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$action</span>, <span class="variable">$params</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$q</span> = <span class="keyword">new</span> \yii\db\Query();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$q</span>-&gt;from(<span class="string">'user'</span>)-&gt;max(<span class="string">'updated_at'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认情况下，在控制器类中声明的过滤器会应用到当前控制器下的所有动作。But，我们可以通过配置<code>only</code>属性来指定当前过滤器应用的动作，如上例。我们也可以通过配置<code>except</code>属性来指出哪些动作不应用于当前过滤器。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2独立模块：Modules]]></title>
    <link href="http://yoursite.com/2015/08/26/yii2%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97%EF%BC%9AModules/"/>
    <id>http://yoursite.com/2015/08/26/yii2独立模块：Modules/</id>
    <published>2015-08-26T13:57:16.000Z</published>
    <updated>2015-08-29T11:21:06.000Z</updated>
    <content type="html"><![CDATA[<p>Modules是一个由模型层、视图层、控制器层构成的自包含模块，另外还支持组件（components），终端用户可以直接访问modules的控制器。所以，modules会被视为一个小型的应用，模块却别于正常应用的是，其不能独立存在，而必须隶属于应用的一部分。</p>
<h2 id="创建Modules"><strong>创建Modules</strong></h2><p>模块通常位于根目录，在这个目录内包含有子目录，如<code>controllers</code>、<code>models</code>、<code>views</code>，形如一个正常的应用，下面是一个模块的例子：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">forum/</span><br><span class="line">    Module.php                   the module class <span class="keyword">file</span></span><br><span class="line">    controllers/                 containing controller class <span class="keyword">files</span></span><br><span class="line">        DefaultController.php    the default controller class <span class="keyword">file</span></span><br><span class="line">    models/                      containing model class <span class="keyword">files</span></span><br><span class="line">    views/                       containing controller <span class="keyword">view</span> <span class="built_in">and</span> layout <span class="keyword">files</span></span><br><span class="line">        layouts/                 containing layout <span class="keyword">view</span> <span class="keyword">files</span></span><br><span class="line">        default/                 containing <span class="keyword">view</span> <span class="keyword">files</span> <span class="keyword">for</span> DefaultController</span><br><span class="line">            <span class="built_in">index</span>.php            the <span class="built_in">index</span> <span class="keyword">view</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="模块类（Modules_Classes）"><strong>模块类（Modules Classes）</strong></h2><p>每个模块都应该有一个继承自<code>yii\base\Module</code>的唯一module类。该类应当为模块根目录下，并且能够自动加载。当模块被访问时，其对应的模块类会生成一个实例。如同应用实例，模块实例为模块内的代码提供共享配置及组件。</p>
<p>下面是一个module类的例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">forum</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">base</span>\<span class="title">Module</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::init();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;params[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">        <span class="comment">// ...  other initialization code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果<code>init()</code>方法内包很多初始化代码，就可以将他们保存在一个单独的配置文件里，然后在<code>init()</code>里加载这个配置文件。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::init();</span><br><span class="line">    <span class="comment">// initialize the module with the configuration loaded from config.php</span></span><br><span class="line">    \Yii::configure(<span class="variable">$this</span>, <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/config.php'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件<code>config.php</code>通常包含以下内容，类似于应用的配置：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'components'</span> =&gt; [</span><br><span class="line">            <span class="comment">// list of component configurations</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'params'</span> =&gt; [</span><br><span class="line">            <span class="comment">// list of parameters</span></span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用模块"><strong>使用模块</strong></h2><p>为了能够使用模块，需要将其列入应用配置modules属性内，下面是一个在应用配置文件中使用<code>form</code>模块的例子：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'modules'</span> =&gt; [</span><br><span class="line">        <span class="string">'forum'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'app\modules\forum\Module'</span>,</span><br><span class="line">            <span class="comment">// ... other configurations for the module ...</span></span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><code>modules</code>属性是一个包含模块配置的数组，数组的key是标识模块的唯一ID，值是用来的创建模块的配置。</p>
<h2 id="路由（routes）"><strong>路由（routes）</strong></h2><p>如同访问应用中的控制器一样，路由通常用来定位模块总的控制器。模块中的控制路由由<code>module ID</code>、<code>controller ID</code>、<code>action ID</code>依次连接组成，例如：<code>form/post/index</code>。如果只写<code>module ID</code>，那么将会访问名为<code>default</code>的默认控制器。</p>
<h2 id="模块访问"><strong>模块访问</strong></h2><p>在一个模块内，我们可能经常需要获得模块的实例，以便访问其ID、参数、组件等。<br>获取实例可以通过以下方式：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$module</span> = <span class="constant">MyModuleClass:</span><span class="symbol">:getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> get the child <span class="keyword">module</span> whose <span class="constant">ID </span>is <span class="string">"forum"</span></span><br><span class="line"><span class="variable">$module</span> = \<span class="constant">Yii:</span><span class="symbol">:</span><span class="variable">$app</span>-&gt;getModule(<span class="string">'forum'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> get the <span class="keyword">module</span> to which the currently requested controller belongs</span><br><span class="line"><span class="variable">$module</span> = \<span class="constant">Yii:</span><span class="symbol">:</span><span class="variable">$app</span>-&gt;controller-&gt;<span class="keyword">module</span>;</span><br></pre></td></tr></table></figure></p>
<p>一旦获得实例，便可访问其参数：<br><code>$maxPostCount = $module-&gt;params[&#39;maxPostCount&#39;];</code></p>
<h2 id="模块启动引导（Bootstrapping_Modules）"><strong>模块启动引导（Bootstrapping Modules）</strong></h2><p>有些模块我们可能需要针对任何请求，例如debug模块。因此，应当将模块ID放入应用的<code>bootstrap</code>属性。</p>
<p>下面的配置能够保证debug模块总会启动：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    'bootstrap' =&gt; [</span><br><span class="line">        'debug',</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    'modules' =&gt; [</span><br><span class="line">        'debug' =&gt; 'yii\debug\Module',</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="模块嵌套"><strong>模块嵌套</strong></h2><p>模块嵌套时，需要在其父模块作声明，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">forum</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Module</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">base</span>\<span class="title">Module</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::init();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;modules = [</span><br><span class="line">            <span class="string">'admin'</span> =&gt; [</span><br><span class="line">                <span class="comment">// you should consider using a shorter namespace here!</span></span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\modules\forum\modules\admin\Module'</span>,</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>访问嵌套模块的路由规则应当是，包含其所有的祖先模块ID，外加controller ID、action ID，例如：<br><code>forum/admin/dashboard/index</code></p>
<h2 id="最佳实践"><strong>最佳实践</strong></h2><ul>
<li><p>模块通常被用于一些复杂的应用中，其某些特性可以独立成组，构成一个模块，每个模块可以有指定的开发人员或team开发和维护。</p>
</li>
<li><p>模块也可用作代码复用，尤其针对可以独立成块的系统特性，如用户管理、评论管理等。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Modules是一个由模型层、视图层、控制器层构成的自包含模块，另外还支持组件（components），终端用户可以直接访问modules的控制器。所以，modules会被视为一个小型的应用，模块却别于正常应用的是，其不能独立存在，而必须隶属于应用的一部分。</p>
<h2 id="创建Modules"><strong>创建Modules</strong></h2><p>模块通常位于根目录，在这个目录内包含有子目录，如<code>controllers</code>、<code>models</code>、<code>views</code>，形如一个正常的应用，下面是一个模块的例子：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">forum/</span><br><span class="line">    Module.php                   the module class <span class="keyword">file</span></span><br><span class="line">    controllers/                 containing controller class <span class="keyword">files</span></span><br><span class="line">        DefaultController.php    the default controller class <span class="keyword">file</span></span><br><span class="line">    models/                      containing model class <span class="keyword">files</span></span><br><span class="line">    views/                       containing controller <span class="keyword">view</span> <span class="built_in">and</span> layout <span class="keyword">files</span></span><br><span class="line">        layouts/                 containing layout <span class="keyword">view</span> <span class="keyword">files</span></span><br><span class="line">        default/                 containing <span class="keyword">view</span> <span class="keyword">files</span> <span class="keyword">for</span> DefaultController</span><br><span class="line">            <span class="built_in">index</span>.php            the <span class="built_in">index</span> <span class="keyword">view</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="独立模块" scheme="http://yoursite.com/tags/%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97/"/>
    
      <category term="yii2" scheme="http://yoursite.com/categories/yii2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小技巧-PHP获取上周的起始时间和结束时间]]></title>
    <link href="http://yoursite.com/2015/08/15/PHP%E8%8E%B7%E5%8F%96%E4%B8%8A%E5%91%A8%E7%9A%84%E8%B5%B7%E5%A7%8B%E6%97%B6%E9%97%B4%E5%92%8C%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2015/08/15/PHP获取上周的起始时间和结束时间/</id>
    <published>2015-08-15T09:06:36.000Z</published>
    <updated>2015-08-15T09:08:17.000Z</updated>
    <content type="html"><![CDATA[<p>就像下面这样<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lastWeekStart</span> = mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">date</span>(<span class="string">'m'</span>),<span class="keyword">date</span>(<span class="string">'d'</span>)-<span class="keyword">date</span>(<span class="string">'w'</span>)+<span class="number">1</span>-<span class="number">7</span>,<span class="keyword">date</span>(<span class="string">'Y'</span>));</span><br><span class="line"><span class="variable">$lastWeekEnd</span> = mktime(<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>,<span class="keyword">date</span>(<span class="string">'m'</span>),<span class="keyword">date</span>(<span class="string">'d'</span>)-<span class="keyword">date</span>(<span class="string">'w'</span>)+<span class="number">7</span>-<span class="number">7</span>,<span class="keyword">date</span>(<span class="string">'Y'</span>));</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>就像下面这样<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br>]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP常用算法（排序、排序插入、xml转array）]]></title>
    <link href="http://yoursite.com/2015/08/15/PHP%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%EF%BC%88%E6%8E%92%E5%BA%8F%E3%80%81%E6%8E%92%E5%BA%8F%E6%8F%92%E5%85%A5%E3%80%81xml%E8%BD%ACarray%EF%BC%89/"/>
    <id>http://yoursite.com/2015/08/15/PHP常用算法（排序、排序插入、xml转array）/</id>
    <published>2015-08-15T04:27:24.000Z</published>
    <updated>2015-08-15T08:59:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、排序">一、排序</h2><h4 id="1、二维数组排序"><strong> 1、二维数组排序 </strong></h4><p>主要思路是取出要用来的排序的字段，并以源数组键为建，对其进行相应排序后，对应回源数组。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 二维数组排序（保留键、值）</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $arr       array     排序数组</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $keys      string    排序字段</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $order     int       排序依据 0正序，1逆序</span><br><span class="line"> *<span class="phpdoc"> @return</span> $new_array array     返回排序后数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_sort</span><span class="params">(<span class="variable">$arr</span>,<span class="variable">$keys</span>,<span class="variable">$order</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否为数组，否则直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(!is_array(<span class="variable">$arr</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个存储排序字段的空数组</span></span><br><span class="line">    <span class="variable">$keysvalue</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//遍历排序要排序的数组，将要排序的字段取出，形成一个一维数组，键为源数组键，值为排序字段值</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">        <span class="variable">$keysvalue</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>[<span class="variable">$keys</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据order参数，对上述以为数组排序，注意需采用asort以保留键名</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$order</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        asort(<span class="variable">$keysvalue</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        arsort(<span class="variable">$keysvalue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将指针重置至第一个</span></span><br><span class="line">    reset(<span class="variable">$keysvalue</span>);</span><br><span class="line">    <span class="comment">//定一个空数组，用以保存排序后的数组</span></span><br><span class="line">    <span class="variable">$new_array</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//遍历排序后的一维数组，由于其键就是源数组的键，对应其键就可形成一个新数组</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$keysort</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">        <span class="variable">$new_array</span>[<span class="variable">$key</span>] = <span class="variable">$arr</span>[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回排序后的新数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$new_array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、快速排序"><strong> 2、快速排序 </strong></h4><p>前段时间遇到一个需要根据二位数组的中的多个维度进行排序的情况，于是将快速排序进行了一点改造，以支持多个维度的排序。<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 快速排序(最多支持三个维度数据，可根据需要添加elseif语句，来扩充维度)</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $arr       array     排序数组 eg:$array = [[300,30,3],[300,40,2],[100,10,1],[100,10,2]];</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $order     int       排序依据 0正序，1逆序</span><br><span class="line"> *<span class="phpdoc"> @return</span> $new_array array     返回排序后数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span><span class="params">(<span class="variable">$arr</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断数组是否需要排序</span></span><br><span class="line">    <span class="keyword">if</span> (count(<span class="variable">$arr</span>) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数组首项作为对比基数</span></span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//定义左侧空数组</span></span><br><span class="line">    <span class="variable">$left_arr</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//定义右侧空数组</span></span><br><span class="line">    <span class="variable">$right_arr</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//对比基数，分别写入左右数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$arr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>] &lt; <span class="variable">$key</span>) &#123;</span><br><span class="line">                <span class="variable">$left_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>][<span class="number">0</span>] &lt; <span class="variable">$key</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="variable">$left_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>] == <span class="variable">$key</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>][<span class="number">1</span>] &lt; <span class="variable">$key</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="variable">$left_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>][<span class="number">1</span>] == <span class="variable">$key</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>][<span class="number">2</span>] &lt; <span class="variable">$key</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">                    <span class="variable">$left_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$right_arr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用，对左右数组排序</span></span><br><span class="line">    <span class="variable">$left_arr</span> = quickSort(<span class="variable">$left_arr</span>);</span><br><span class="line">    <span class="variable">$right_arr</span> = quickSort(<span class="variable">$right_arr</span>);</span><br><span class="line">    <span class="comment">//合并并返回排序后的数组</span></span><br><span class="line">    <span class="keyword">return</span> array_merge(<span class="variable">$left_arr</span>,<span class="keyword">array</span>(<span class="variable">$key</span>),<span class="variable">$right_arr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二、排序插入">二、排序插入</h2><p>同样是由于业务需要，在二分查找的基础上做了一个排序插入。<br>这个函数分两种情况：<br>一是如果插入的数据已经存在于当前数组，则不会重复插入，而是返回其所在位置。<br>二是如果插入的数据不存在则会将其插入顺序所在位置，并返回整个数组和其插入的位置，例如：向数组<code>[1, 2, 3, 5]</code>中插入<code>4</code>，则会返回<code>[1, 2, 3, 4, 5, &#39;current&#39;=&gt;3]</code>这样的一个数组</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 排序插入 兼容 二分查找</span><br><span class="line"> *<span class="phpdoc"> @param</span>   $array          array            Y 数组</span><br><span class="line"> *<span class="phpdoc"> @param</span>   $v              string           Y 要找的值</span><br><span class="line"> *<span class="phpdoc"> @param</span>   $low            int              N 查找范围的最小键值</span><br><span class="line"> *<span class="phpdoc"> @param</span>   $high           int              N 范围的最大键值</span><br><span class="line"> *<span class="phpdoc"> @return</span>  $array || $mid  array || int     如果不存在返回插入且已排序数组 || 如果存在返回所在位置</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binInsert</span><span class="params">(<span class="variable">$array</span>,<span class="variable">$v</span>,<span class="variable">$low</span>=<span class="number">0</span>,<span class="variable">$high</span>=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否第一次调用</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$high</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$high</span> = count(<span class="variable">$array</span>);</span><br><span class="line">        <span class="comment">//排除首项相等</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$array</span>[<span class="number">0</span>] == <span class="variable">$v</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结束递归并插入</span></span><br><span class="line">    <span class="variable">$diff</span> = <span class="variable">$high</span> - <span class="variable">$low</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$diff</span> == <span class="number">0</span> || <span class="variable">$diff</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        array_splice(<span class="variable">$array</span>, <span class="variable">$low</span>+<span class="number">1</span>, <span class="number">0</span>, <span class="variable">$v</span>);</span><br><span class="line">        <span class="comment">//排除空数组首项</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$diff</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$array</span>[<span class="string">'current'</span>] = <span class="variable">$low</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$array</span>[<span class="string">'current'</span>] = <span class="variable">$low</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果还存在剩余数组元素</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$low</span>&lt;<span class="variable">$high</span>)&#123;</span><br><span class="line">        <span class="comment">//取$low和$high的中间值</span></span><br><span class="line">        <span class="variable">$mid</span> = intval((<span class="variable">$low</span>+<span class="variable">$high</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//比对并递归</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$v</span> == <span class="variable">$array</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(<span class="variable">$v</span> &lt; <span class="variable">$array</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> binInsert(<span class="variable">$array</span>, <span class="variable">$v</span>, <span class="variable">$low</span>, <span class="variable">$mid</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> binInsert(<span class="variable">$array</span>, <span class="variable">$v</span>, <span class="variable">$mid</span>, <span class="variable">$high</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、xml_转_array">三、xml 转 array</h2><p>同样是在工作中遇到的一个问题，就是从第三方取来一组数据，是xml格式的，处理起来头疼的很，于是将其转换为array，就可以随便处理了。其核心部分就是正则表示式<code>/&lt;(\w+)[^&gt;]*&gt;([\\x00-\\xFF]*?)&lt;\\/\\1&gt;/</code>。解释一下，<code>&lt;(\w+)[^&gt;]*&gt;</code>这一个部分匹配标签头；<code>([\\x00-\\xFF]*?)</code>这一部分匹配标签内部所有内容，并且采用懒惰获取模式，即对后面的匹配模式<code>&lt;\\/\\1&gt;</code>预查后匹配，否则会匹配到所有后面的元素；<code>&lt;\\/\\1&gt;</code>这一部分匹配标签尾。</p>
<p>这其中有两部分匹配获取，及括号内的匹配项，会在下文的匹配结果（debug）中体现出来。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * xml数据转换为array</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $xml          xml      XML格式数据</span><br><span class="line"> *<span class="phpdoc"> @param</span>  $repeatField  string   同级重复标签项</span><br><span class="line"> *<span class="phpdoc"> @return</span> $arr          array    转换后的数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xml_to_array</span><span class="params">(<span class="variable">$xml</span>, <span class="variable">$repeatField</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//xml数据预处理，去除空白字符</span></span><br><span class="line">    <span class="variable">$regs</span> = <span class="string">"/\s*/"</span>;</span><br><span class="line">    <span class="variable">$xml</span> = preg_replace(<span class="variable">$regs</span>, <span class="string">''</span>, <span class="variable">$xml</span>);</span><br><span class="line">    <span class="comment">//匹配标签及内容</span></span><br><span class="line">    <span class="variable">$reg</span> = <span class="string">"/&lt;(\w+)[^&gt;]*&gt;([\\x00-\\xFF]*?)&lt;\\/\\1&gt;/"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match_all(<span class="variable">$reg</span>, <span class="variable">$xml</span>, <span class="variable">$matches</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1、获取匹配后的结果，参考下面的debug</span></span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$subxml</span>= <span class="variable">$matches</span>[<span class="number">2</span>][<span class="variable">$i</span>];</span><br><span class="line">            <span class="comment">//替换重复的标签项，否则会造成覆盖，如下文的TempTable，像这种重复的键就要用数字来代替</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$matches</span>[<span class="number">1</span>][<span class="variable">$i</span>] == <span class="variable">$repeatField</span>) &#123;</span><br><span class="line">                <span class="variable">$key</span> = <span class="variable">$i</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$key</span> = <span class="variable">$matches</span>[<span class="number">1</span>][<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否subxml中的数据是否仍为xml数据</span></span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="variable">$reg</span>, <span class="variable">$subxml</span>))</span><br><span class="line">            &#123;  <span class="comment">//是，递归</span></span><br><span class="line">                <span class="variable">$arr</span>[<span class="variable">$key</span>] = xml_to_array(<span class="variable">$subxml</span>, <span class="variable">$repeatField</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//否直接写入</span></span><br><span class="line">                <span class="variable">$arr</span>[<span class="variable">$key</span>] = <span class="variable">$subxml</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 调用方法： </strong>xml_to_array($xml, ‘TempTable’)<br><strong> 数据源： </strong>参考如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">NewDataSet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">TempTable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">nID</span>&gt;</span>2880<span class="tag">&lt;/<span class="title">nID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">EnterpriseID</span>&gt;</span>8088<span class="tag">&lt;/<span class="title">EnterpriseID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">EnterNO</span>&gt;</span>100158<span class="tag">&lt;/<span class="title">EnterNO</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CallID</span>&gt;</span>136****6155201506012258055571<span class="tag">&lt;/<span class="title">CallID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CallerID</span>&gt;</span>136****6155<span class="tag">&lt;/<span class="title">CallerID</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">TempTable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">TempTable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">nID</span>&gt;</span>2879<span class="tag">&lt;/<span class="title">nID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">EnterpriseID</span>&gt;</span>8023<span class="tag">&lt;/<span class="title">EnterpriseID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">EnterNO</span>&gt;</span>101658<span class="tag">&lt;/<span class="title">EnterNO</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CallID</span>&gt;</span>186****5873201506012012599627<span class="tag">&lt;/<span class="title">CallID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CallerID</span>&gt;</span>186****5873<span class="tag">&lt;/<span class="title">CallerID</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">TempTable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">NewDataSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Flag</span>&gt;</span>Ok<span class="tag">&lt;/<span class="title">Flag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ReturnMsg</span>&gt;</span>获取呼入记录成功！<span class="tag">&lt;/<span class="title">ReturnMsg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong> debug 数据</strong></p>
<p><code>array[0]</code>是元数据，<code>array[1]</code>是获取匹配一<code>(\w+)</code>获取的内容，<code>array[2]</code>是获取匹配二<code>([\\x00-\\xFF]*?)</code>获取的内容。</p>
<p>如此一层层递归下去，一层层剥掉她们的外衣！！！</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">array (size=3)</span><br><span class="line">  0 =&gt;</span><br><span class="line">    array (size=3)</span><br><span class="line">      0 =&gt; string '<span class="variable">&lt;NewDataSet&gt;</span></span><br><span class="line">                                <span class="variable">&lt;TempTable&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;nID&gt;</span>2880<span class="variable">&lt;/nID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;EnterpriseID&gt;</span>8088<span class="variable">&lt;/EnterpriseID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;EnterNO&gt;</span>100158<span class="variable">&lt;/EnterNO&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;CallID&gt;</span>136<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>6155201506012258055571<span class="variable">&lt;/CallID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;CallerID&gt;</span>136<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>6155<span class="variable">&lt;/CallerID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;/TempTable&gt;</span></span><br><span class="line">                                <span class="variable">&lt;TempTable&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;nID&gt;</span>2879<span class="variable">&lt;/nID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;EnterpriseID&gt;</span>8023<span class="variable">&lt;/EnterpriseID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;EnterNO&gt;</span>101658<span class="variable">&lt;/EnterNO&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;CallID&gt;</span>186<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>5873201506012012599627<span class="variable">&lt;/CallID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;CallerID&gt;</span>186<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>5873<span class="variable">&lt;/CallerID&gt;</span></span><br><span class="line">                                    <span class="variable">&lt;/TempTable&gt;</span></span><br><span class="line">                                <span class="variable">&lt;/NewDataSet&gt;</span>' (length=373)</span><br><span class="line">      1 =&gt; string '<span class="variable">&lt;Flag&gt;</span>Ok<span class="variable">&lt;/Flag&gt;</span>' (length=15)</span><br><span class="line">      2 =&gt; string '<span class="variable">&lt;ReturnMsg&gt;</span>获取呼入记录成功！<span class="variable">&lt;/ReturnMsg&gt;</span>' (length=50)</span><br><span class="line">  1 =&gt;</span><br><span class="line">    array (size=3)</span><br><span class="line">      0 =&gt; string 'NewDataSet' (length=10)</span><br><span class="line">      1 =&gt; string 'Flag' (length=4)</span><br><span class="line">      2 =&gt; string 'ReturnMsg' (length=9)</span><br><span class="line">  2 =&gt;</span><br><span class="line">    array (size=3)</span><br><span class="line">      0 =&gt; string '<span class="variable">&lt;TempTable&gt;</span></span><br><span class="line">                                <span class="variable">&lt;nID&gt;</span>2880<span class="variable">&lt;/nID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;EnterpriseID&gt;</span>8088<span class="variable">&lt;/EnterpriseID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;EnterNO&gt;</span>100158<span class="variable">&lt;/EnterNO&gt;</span></span><br><span class="line">                                <span class="variable">&lt;CallID&gt;</span>136<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>6155201506012258055571<span class="variable">&lt;/CallID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;CallerID&gt;</span>136<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>6155<span class="variable">&lt;/CallerID&gt;</span></span><br><span class="line">                            <span class="variable">&lt;/TempTable&gt;</span></span><br><span class="line">                            <span class="variable">&lt;TempTable&gt;</span></span><br><span class="line">                                <span class="variable">&lt;nID&gt;</span>2879<span class="variable">&lt;/nID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;EnterpriseID&gt;</span>8023<span class="variable">&lt;/EnterpriseID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;EnterNO&gt;</span>101658<span class="variable">&lt;/EnterNO&gt;</span></span><br><span class="line">                                <span class="variable">&lt;CallID&gt;</span>186<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>5873201506012012599627<span class="variable">&lt;/CallID&gt;</span></span><br><span class="line">                                <span class="variable">&lt;CallerID&gt;</span>186<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>5873<span class="variable">&lt;/CallerID&gt;</span></span><br><span class="line">                            <span class="variable">&lt;/TempTable&gt;</span>' (length=348)</span><br><span class="line">      1 =&gt; string 'Ok' (length=2)</span><br><span class="line">      2 =&gt; string '获取呼入记录成功！' (length=27)</span><br></pre></td></tr></table></figure>
<p><strong> 最终结果 </strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">array (size=<span class="number">3</span>)</span><br><span class="line">  <span class="string">'NewDataSet'</span> =&gt;</span><br><span class="line">    array (size=<span class="number">2</span>)</span><br><span class="line">      <span class="number">0</span> =&gt;</span><br><span class="line">        array (size=<span class="number">5</span>)</span><br><span class="line">          <span class="string">'nID'</span> =&gt; <span class="keyword">string</span> <span class="string">'2880'</span> (<span class="built_in">length</span>=<span class="number">4</span>)</span><br><span class="line">          <span class="string">'EnterpriseID'</span> =&gt; <span class="keyword">string</span> <span class="string">'8088'</span> (<span class="built_in">length</span>=<span class="number">4</span>)</span><br><span class="line">          <span class="string">'EnterNO'</span> =&gt; <span class="keyword">string</span> <span class="string">'100158'</span> (<span class="built_in">length</span>=<span class="number">6</span>)</span><br><span class="line">          <span class="string">'CallID'</span> =&gt; <span class="keyword">string</span> <span class="string">'136****6155201506012258055571'</span> (<span class="built_in">length</span>=<span class="number">29</span>)</span><br><span class="line">          <span class="string">'CallerID'</span> =&gt; <span class="keyword">string</span> <span class="string">'136****6155'</span> (<span class="built_in">length</span>=<span class="number">11</span>)</span><br><span class="line">      <span class="number">1</span> =&gt;</span><br><span class="line">        array (size=<span class="number">5</span>)</span><br><span class="line">          <span class="string">'nID'</span> =&gt; <span class="keyword">string</span> <span class="string">'2879'</span> (<span class="built_in">length</span>=<span class="number">4</span>)</span><br><span class="line">          <span class="string">'EnterpriseID'</span> =&gt; <span class="keyword">string</span> <span class="string">'8023'</span> (<span class="built_in">length</span>=<span class="number">4</span>)</span><br><span class="line">          <span class="string">'EnterNO'</span> =&gt; <span class="keyword">string</span> <span class="string">'101658'</span> (<span class="built_in">length</span>=<span class="number">6</span>)</span><br><span class="line">          <span class="string">'CallID'</span> =&gt; <span class="keyword">string</span> <span class="string">'186****5873201506012012599627'</span> (<span class="built_in">length</span>=<span class="number">29</span>)</span><br><span class="line">          <span class="string">'CallerID'</span> =&gt; <span class="keyword">string</span> <span class="string">'186****5873'</span> (<span class="built_in">length</span>=<span class="number">11</span>)</span><br><span class="line">  <span class="string">'Flag'</span> =&gt; <span class="keyword">string</span> <span class="string">'Ok'</span> (<span class="built_in">length</span>=<span class="number">2</span>)</span><br><span class="line">  <span class="string">'ReturnMsg'</span> =&gt; <span class="keyword">string</span> <span class="string">'获取呼入记录成功！'</span> (<span class="built_in">length</span>=<span class="number">27</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[php, 排序, 排序插入, xml转array]]>
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="xml转array" scheme="http://yoursite.com/tags/xml%E8%BD%ACarray/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="排序插入" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E6%8F%92%E5%85%A5/"/>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenSSL]]></title>
    <link href="http://yoursite.com/2015/08/04/OpenSSL/"/>
    <id>http://yoursite.com/2015/08/04/OpenSSL/</id>
    <published>2015-08-04T15:44:16.000Z</published>
    <updated>2015-08-15T08:59:06.000Z</updated>
    <content type="html"><![CDATA[<p>OpenSSL可以对签名进行生成和验证，对数据进行加密和解密</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OpenSSL可以对签名进行生成和验证，对数据进行加密和解密</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP中CURL方法curl_setopt()函数的参数(mark待查...)]]></title>
    <link href="http://yoursite.com/2015/08/04/PHP%E4%B8%ADCURL%E6%96%B9%E6%B3%95curl_setopt()%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0(mark%E5%BE%85%E6%9F%A5...)/"/>
    <id>http://yoursite.com/2015/08/04/PHP中CURL方法curl_setopt()函数的参数(mark待查...)/</id>
    <published>2015-08-04T15:07:45.000Z</published>
    <updated>2015-08-15T08:59:07.000Z</updated>
    <content type="html"><![CDATA[<p>PHP CURL curl_setopt 参数</p>
<p>bool curl_setopt (int ch, string option, mixed value)<br>curl_setopt()函数将为一个CURL会话设置选项。option参数是你想要的设置，value是这个选项给定的值。</p>
<p>下列选项的值将被作为长整形使用(在option参数中指定)：<br>?    CURLOPT_INFILESIZE : 当你上传一个文件到远程站点，这个选项告诉PHP你上传文件的大小。<br>?    CURLOPT_VERBOSE : 如果你想CURL报告每一件意外的事情，设置这个选项为一个非零值。<br>?    CURLOPT_HEADER : 如果你想把一个头包含在输出中，设置这个选项为一个非零值。<br>?    CURLOPT_NOPROGRESS: 如果你不会PHP为CURL传输显示一个进程条，设置这个选项为一个非零值。注意：PHP自动设置这个选项为非零值，你应该仅仅为了调试的目的来改变这个选项。<br>?    CURLOPT_NOBODY : 如果你不想在输出中包含body部分，设置这个选项为一个非零值。<br>?    CURLOPT_FAILONERROR : 如果你想让PHP在发生错误(HTTP代码返回大于等于300)时，不显示，设置这个选项为一人非零值。默认行为是返回一个正常页，忽略代码。<br>?    CURLOPT_UPLOAD: 如果你想让PHP为上传做准备，设置这个选项为一个非零值。<br>?    CURLOPT_POST : 如果你想PHP去做一个正规的HTTP POST，设置这个选项为一个非零值。这个POST是普通的 application/x-www-from-urlencoded 类型，多数被HTML表单使用。<br><a id="more"></a><br>?    CURLOPT_FTPLISTONLY : 设置这个选项为非零值，PHP将列出FTP的目录名列表。<br>?    CURLOPT_FTPAPPEND : 设置这个选项为一个非零值，PHP将应用远程文件代替覆盖它。<br>?    CURLOPT_NETRC : 设置这个选项为一个非零值，PHP将在你的 ~./netrc 文件中查找你要建立连接的远程站点的用户名及密码。<br>?    CURLOPT_FOLLOWLOCATION : 设置这个选项为一个非零值(象 “Location: “)的头，服务器会把它当做HTTP头的一部分发送(注意这是递归的，PHP将发送形如 “Location: “的头)。<br>?    CURLOPT_PUT : 设置这个选项为一个非零值去用HTTP上传一个文件。要上传这个文件必须设置CURLOPT_INFILE和CURLOPT_INFILESIZE选项.<br>?    CURLOPT_MUTE : 设置这个选项为一个非零值，PHP对于CURL函数将完全沉默。<br>?    CURLOPT_TIMEOUT : 设置一个长整形数，作为最大延续多少秒。<br>?    CURLOPT_LOW_SPEED_LIMIT: 设置一个长整形数，控制传送多少字节。<br>?    CURLOPT_LOW_SPEED_TIME : 设置一个长整形数，控制多少秒传送CURLOPT_LOW_SPEED_LIMIT规定的字节数。<br>?    CURLOPT_RESUME_FROM : 传递一个包含字节偏移地址的长整形参数，(你想转移到的开始表单)。<br>?    CURLOPT_SSLVERSION: 传递一个包含SSL版本的长参数。默认PHP将被它自己努力的确定，在更多的安全中你必须手工设置。<br>?    CURLOPT_TIMECONDITION : 传递一个长参数，指定怎么处理CURLOPT_TIMEVALUE参数。你可以设置这个参数为TIMECOND_IFMODSINCE 或 TIMECOND_ISUNMODSINCE。这仅用于HTTP。<br>?    CURLOPT_TIMEVALUE : 传递一个从1970-1-1开始到现在的秒数。这个时间将被CURLOPT_TIMEVALUE选项作为指定值使用，或被默认TIMECOND_IFMODSINCE使用。</p>
<p>下列选项的值将被作为字符串：<br>?    CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项。<br>?    CURLOPT_USERPWD : 传递一个形如[username]:[password]风格的字符串,作用PHP去连接。<br>?    CURLOPT_PROXYUSERPWD : 传递一个形如[username]:[password] 格式的字符串去连接HTTP代理。<br>?    CURLOPT_RANGE : 传递一个你想指定的范围。它应该是”X-Y”格式，X或Y是被除外的。HTTP传送同样支持几个间隔，用逗句来分隔(X-Y,N-M)。<br>?    CURLOPT_POSTFIELDS : 传递一个作为HTTP “POST”操作的所有数据的字符串。<br>?    CURLOPT_REFERER: 在HTTP请求中包含一个”referer”头的字符串。<br>?    CURLOPT_USERAGENT : 在HTTP请求中包含一个”user-agent”头的字符串。<br>?    CURLOPT_FTPPORT: 传递一个包含被ftp “POST”指令使用的IP地址。这个POST指令告诉远程服务器去连接我们指定的IP地址。这个字符串可以是一个IP地址，一个主机名，一个网络界面名(在UNIX下)，或是‘-’(使用系统默认IP地址)。<br>?    CURLOPT_COOKIE : 传递一个包含HTTP cookie的头连接。<br>?    CURLOPT_SSLCERT : 传递一个包含PEM格式证书的字符串。<br>?    CURLOPT_SSLCERTPASSWD : 传递一个包含使用CURLOPT_SSLCERT证书必需的密码。<br>?    CURLOPT_COOKIEFILE : 传递一个包含cookie数据的文件的名字的字符串。这个cookie文件可以是Netscape格式，或是堆存在文件中的HTTP风格的头。<br>?    CURLOPT_CUSTOMREQUEST : 当进行HTTP请求时，传递一个字符被GET或HEAD使用。为进行DELETE或其它操作是有益的，更Pass a string to be used instead of GET or HEAD when doing an HTTP request. This is useful for doing or another, more obscure, HTTP request. 注意: 在确认你的服务器支持命令先不要去这样做。下列的选项要求一个文件描述(通过使用fopen()函数获得)：<br>?    CURLOPT_FILE: 这个文件将是你放置传送的输出文件，默认是STDOUT.<br>?    CURLOPT_INFILE : 这个文件是你传送过来的输入文件。<br>?    CURLOPT_WRITEHEADER : 这个文件写有你输出的头部分。<br>?    CURLOPT_STDERR : 这个文件写有错误而不是stderr。用来获取需要登录的页面的例子,当前做法是每次或许都登录一次,有需要的人再做改进了.</p>
<p>例一：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookie_jar</span> = tempnam(<span class="string">'./tmp'</span>,<span class="string">'cookie'</span>);</span><br><span class="line"><span class="variable">$ch</span> = curl_init(); curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_URL, <span class="string">'http://******'</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$request</span> = <span class="string">'email_address=&amp;password=&amp;action='</span>;</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$request</span>); //把返回来的cookie信息保存在<span class="variable">$cookie_jar</span>文件中</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_COOKIEJAR, <span class="variable">$cookie_jar</span>); //设定返回的数据是否自动显示</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); //设定是否显示头信息</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">false</span>); //设定是否输出页面内容</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_NOBODY, <span class="literal">false</span>);</span><br><span class="line">curl_<span class="built_in">exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>); //get data after login</span><br></pre></td></tr></table></figure>
<p>例二：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ch2</span> = curl_init();</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_URL, <span class="string">'http://*****'</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_HEADER, <span class="literal">false</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie_jar</span>);</span><br><span class="line"><span class="variable">$orders</span> = curl_<span class="built_in">exec</span>(<span class="variable">$ch2</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> strip_tags(<span class="variable">$orders</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span>;</span><br><span class="line">curl_close(<span class="variable">$ch2</span>); 实践证明很稳定:)</span><br></pre></td></tr></table></figure>
<p>例三：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>_time_<span class="built_in">limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">_rand</span></span>() &#123;</span><br><span class="line"><span class="variable">$length</span>=<span class="number">26</span>;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line"><span class="variable">$max</span> = strlen(<span class="variable">$chars</span>) - <span class="number">1</span>;</span><br><span class="line">mt_srand((double)microtime() * <span class="number">1000000</span>);</span><br><span class="line"><span class="variable">$string</span> = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line"><span class="variable">$string</span> .= <span class="variable">$chars</span>[mt_rand(<span class="number">0</span>, <span class="variable">$max</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$HTTP_SESSION</span>=_rand();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HTTP_SESSION</span>;</span><br><span class="line"><span class="variable">$HTTP_Server</span>=<span class="string">"www.baidu.com"</span>;</span><br><span class="line"><span class="variable">$HTTP_URL</span>=<span class="string">"/"</span>;</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_<span class="built_in">setopt</span> (<span class="variable">$ch</span>,CURLOPT_URL,<span class="string">"http://"</span>.<span class="variable">$HTTP_Server</span>.<span class="variable">$HTTP_URL</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_RETURNTRANSFER,<span class="literal">true</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_USERAGENT,<span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>);</span><br><span class="line">//curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_COOKIE,<span class="variable">$HTTP_SESSION</span>);</span><br><span class="line"><span class="variable">$res</span> = curl_<span class="built_in">exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">curl_close (<span class="variable">$ch</span>);</span><br><span class="line"><span class="built_in">print</span>_r(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>刷论坛代码：<br>1、抓cookies程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$URL</span>=<span class="string">"http://www.yoururl.com/bbs/login.asp?action=chk"</span>;</span><br><span class="line">//填入论坛的登陆页面地址</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$URL</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_REFERER,<span class="string">"http://www.hxfoods.com/bbs/login.asp"</span>);</span><br><span class="line">//设置，访问页面的来源地址</span><br><span class="line"></span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_POST,<span class="number">1</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>,CURLOPT_POSTFIELDS,<span class="string">'username=→→敢死队→&amp;password=168168'</span>);</span><br><span class="line">//分析登陆页面，把用户名，密码分别对应起来</span><br><span class="line">curl_<span class="built_in">setopt</span> (<span class="variable">$ch</span>, CURLOPT_HEADER,<span class="literal">true</span>);</span><br><span class="line">//使能显示http头，</span><br><span class="line">curl_<span class="built_in">exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">if</span> (curl_errno(<span class="variable">$ch</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print</span> curl_error(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、刷楼了：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="regexp">//</span>设置程序执行时间无限制</span><br><span class="line"><span class="variable">$i</span>=<span class="number">10000</span>;</span><br><span class="line"><span class="regexp">//</span>耍<span class="number">10000</span>次</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="variable">$i</span>;<span class="variable">$j</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$URL</span>=<span class="string">"http://www.yoururl.com/bbs/savepost.asp"</span>;</span><br><span class="line"><span class="regexp">//</span>这个地址是回复表单里面action的url地址</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$URL</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_REFERER,<span class="string">"http://www.hxfoods.com/bbs/dispbbs.asp?boardid=14&amp;replyid=672709&amp;id=127437&amp;page=1&amp;skin=0&amp;Star=53"</span>);</span><br><span class="line"><span class="regexp">//</span>设置来源地址，如果不设置，论坛服务器有可能有验证不允许回复</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_COOKIESESSION,true);</span><br><span class="line"><span class="regexp">//</span>能保存cookie</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_COOKIE,<span class="string">"DvForum=userid=24122&amp;usercookies=0&amp;userhidden=2&amp;password=w0reu3g775VrY745&amp;userclass=<span class="variable">%96</span><span class="variable">%7C</span>&amp;username=<span class="variable">%A1</span><span class="variable">%FA</span><span class="variable">%A1</span><span class="variable">%FA</span><span class="variable">%B8</span><span class="variable">%D2</span><span class="variable">%CB</span><span class="variable">%C0</span><span class="variable">%B6</span><span class="variable">%D3</span><span class="variable">%A1</span><span class="variable">%FA</span>&amp;StatUserID=2194783945 "</span>);</span><br><span class="line"><span class="regexp">//</span>这儿就是设置cookie了</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_POST,<span class="number">1</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_NOBODY,<span class="number">1</span>);</span><br><span class="line"><span class="regexp">//</span>不显示内容，因为有很多论坛回复后要自动跳转。</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>,CURLOPT_POSTFIELDS,<span class="string">'Body=gfdfgdfgasdfgdfgdfgdfg&amp; followup=672709&amp;RootID=127437&amp;star=58&amp;TotalUseTable=Dv_bbs3&amp; amp;UserName=→→敢死队→&amp;signflag=1&amp;total=65535'</span>);</span><br><span class="line"><span class="regexp">//</span>把你分析的回复表单的参数分别赋值</span><br><span class="line">curl_setopt (<span class="variable">$ch</span>, CURLOPT_HEADER,true);</span><br><span class="line">curl_exec(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">if</span> (curl_errno(<span class="variable">$ch</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> curl_error(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CURL相关函数</p>
<p>curl_close — 关闭一个curl会话<br>curl_copy_handle — 拷贝一个curl连接资源的所有内容和参数<br>curl_errno — 返回一个包含当前会话错误信息的数字编号<br>curl_error — 返回一个包含当前会话错误信息的字符串<br>curl_exec — 执行一个curl会话<br>curl_getinfo — 获取一个curl连接资源句柄的信息<br>curl_init — 初始化一个curl会话<br>curl_multi_add_handle — 向curl批处理会话中添加单独的curl句柄资源<br>curl_multi_close — 关闭一个批处理句柄资源<br>curl_multi_exec — 解析一个curl批处理句柄<br>curl_multi_getcontent — 返回获取的输出的文本流<br>curl_multi_info_read — 获取当前解析的curl的相关传输信息<br>curl_multi_init — 初始化一个curl批处理句柄资源<br>curl_multi_remove_handle — 移除curl批处理句柄资源中的某个句柄资源<br>curl_multi_select — Get all the sockets associated with the cURL extension, which can then be “selected”<br>curl_setopt_array — 以数组的形式为一个curl设置会话参数<br>curl_setopt — 为一个curl设置会话参数<br>curl_version — 获取curl相关的版本信息</p>
<p>curl_init()函数的作用初始化一个curl会话，curl_init()函数唯一的一个参数是可选的，表示一个url地址。<br>curl_exec()函数的作用是执行一个curl会话，唯一的参数是curl_init()函数返回的句柄。<br>curl_close()函数的作用是关闭一个curl会话，唯一的参数是curl_init()函数返回的句柄。</p>
<p>$ch = curl_init(“<a href="http://www.baidu.com/" target="_blank" rel="external">http://www.baidu.com/</a>“);<br>curl_exec($ch);<br>curl_close($ch);</p>
<p>curl_version()函数的作用是获取curl相关的版本信息，curl_version()函数有一个参数，不清楚是做什么的</p>
<p>print_r(curl_version())</p>
<p>curl_getinfo()函数的作用是获取一个curl连接资源句柄的信息，curl_getinfo()函数有两个参数，第一个参数是curl的资源句柄，第二个参数是下面一些常量：</p>
<p>$ch = curl_init(“<a href="http://www.baidu.com/" target="_blank" rel="external">http://www.baidu.com/</a>“);<br>print_r(curl_getinfo($ch));</p>
<p>可选的常量包括：<br>CURLINFO_EFFECTIVE_URL<br>最后一个有效的url地址<br>CURLINFO_HTTP_CODE<br>最后一个收到的HTTP代码<br>CURLINFO_FILETIME<br>远程获取文档的时间，如果无法获取，则返回值为“-1”<br>CURLINFO_TOTAL_TIME<br>最后一次传输所消耗的时间<br>CURLINFO_NAMELOOKUP_TIME<br>名称解析所消耗的时间<br>CURLINFO_CONNECT_TIME<br>建立连接所消耗的时间<br>CURLINFO_PRETRANSFER_TIME<br>从建立连接到准备传输所使用的时间<br>CURLINFO_STARTTRANSFER_TIME<br>从建立连接到传输开始所使用的时间<br>CURLINFO_REDIRECT_TIME<br>在事务传输开始前重定向所使用的时间<br>CURLINFO_SIZE_UPLOAD<br>上传数据量的总值<br>CURLINFO_SIZE_DOWNLOAD<br>下载数据量的总值<br>CURLINFO_SPEED_DOWNLOAD<br>平均下载速度<br>CURLINFO_SPEED_UPLOAD<br>平均上传速度<br>CURLINFO_HEADER_SIZE<br>header部分的大小<br>CURLINFO_HEADER_OUT<br>发送请求的字符串<br>CURLINFO_REQUEST_SIZE<br>在HTTP请求中有问题的请求的大小<br>CURLINFO_SSL_VERIFYRESULT<br>Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER<br>CURLINFO_CONTENT_LENGTH_DOWNLOAD<br>从Content-Length: field中读取的下载内容长度<br>CURLINFO_CONTENT_LENGTH_UPLOAD<br>上传内容大小的说明<br>CURLINFO_CONTENT_TYPE<br>下载内容的“Content-type”值，NULL表示服务器没有发送有效的“Content-Type: header”<br>curl_setopt()函数的作用是为一个curl设置会话参数。curl_setopt_array()函数的作用是以数组的形式为一个curl设置会话参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">"example_homepage.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch</span>, CURLOPT_FILE, <span class="variable">$fp</span>);</span><br><span class="line"><span class="variable">$options</span> = array(</span><br><span class="line">CURLOPT_URL =&gt; <span class="string">'http://www.baidu.com/'</span>,</span><br><span class="line">CURLOPT_HEADER =&gt; <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line">curl_<span class="built_in">setopt</span>_array(<span class="variable">$ch</span>, <span class="variable">$options</span>);</span><br><span class="line">curl_<span class="built_in">exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br></pre></td></tr></table></figure>
<p>可设置的参数有：<br>CURLOPT_AUTOREFERER<br>自动设置header中的referer信息<br>CURLOPT_BINARYTRANSFER<br>在启用CURLOPT_RETURNTRANSFER时候将获取数据返回<br>CURLOPT_COOKIESESSION<br>启用时curl会仅仅传递一个session cookie，忽略其他的cookie，默认状况下curl会将所有的cookie返回给服务端。session cookie是指那些用来判断服务器端的session是否有效而存在的cookie。<br>CURLOPT_CRLF<br>启用时将Unix的换行符转换成回车换行符。<br>CURLOPT_DNS_USE_GLOBAL_CACHE<br>启用时会启用一个全局的DNS缓存，此项为线程安全的，并且默认为true。<br>CURLOPT_FAILONERROR<br>显示HTTP状态码，默认行为是忽略编号小于等于400的HTTP信息<br>CURLOPT_FILETIME<br>启用时会尝试修改远程文档中的信息。结果信息会通过curl_getinfo()函数的CURLINFO_FILETIME选项返回。<br>CURLOPT_FOLLOWLOCATION<br>启用时会将服务器服务器返回的“Location:”放在header中递归的返回给服务器，使用CURLOPT_MAXREDIRS可以限定递归返回的数量。<br>CURLOPT_FORBID_REUSE<br>在完成交互以后强迫断开连接，不能重用。<br>CURLOPT_FRESH_CONNECT<br>强制获取一个新的连接，替代缓存中的连接。<br>CURLOPT_FTP_USE_EPRT<br>TRUE to use EPRT (and LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT only.<br>Added in PHP 5.0.0.<br>CURLOPT_FTP_USE_EPSV<br>TRUE to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable EPSV.<br>CURLOPT_FTPAPPEND<br>TRUE to append to the remote file instead of overwriting it.<br>CURLOPT_FTPASCII<br>An alias of CURLOPT_TRANSFERTEXT. Use that instead.<br>CURLOPT_FTPLISTONLY<br>TRUE to only list the names of an FTP directory.<br>CURLOPT_HEADER<br>启用时会将头文件的信息作为数据流输出。<br>CURLOPT_HTTPGET<br>启用时会设置HTTP的method为GET，因为GET是默认是，所以只在被修改的情况下使用。<br>CURLOPT_HTTPPROXYTUNNEL<br>启用时会通过HTTP代理来传输。<br>CURLOPT_MUTE<br>讲curl函数中所有修改过的参数恢复默认值。<br>CURLOPT_NETRC<br>在连接建立以后，访问~/.netrc文件获取用户名和密码信息连接远程站点。<br>CURLOPT_NOBODY<br>启用时将不对HTML中的body部分进行输出。<br>CURLOPT_NOPROGRESS<br>启用时关闭curl传输的进度条，此项的默认设置为true<br>CURLOPT_NOSIGNAL<br>启用时忽略所有的curl传递给php进行的信号。在SAPI多线程传输时此项被默认打开。<br>CURLOPT_POST<br>启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。<br>CURLOPT_PUT<br>启用时允许HTTP发送文件，必须同时设置CURLOPT_INFILE和CURLOPT_INFILESIZE<br>CURLOPT_RETURNTRANSFER<br>讲curl_exec()获取的信息以文件流的形式返回，而不是直接输出。<br>CURLOPT_SSL_VERIFYPEER<br>FALSE to stop cURL from verifying the peer’s certificate. Alternate certificates to verify against can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified with the CURLOPT_CAPATH option. CURLOPT_SSL_VERIFYHOST may also need to be TRUE or FALSE if CURLOPT_SSL_VERIFYPEER is disabled (it defaults to 2). TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10.<br>CURLOPT_TRANSFERTEXT<br>TRUE to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set STDOUT to binary mode.<br>CURLOPT_UNRESTRICTED_AUTH<br>在使用CURLOPT_FOLLOWLOCATION产生的header中的多个locations中持续追加用户名和密码信息，即使域名已发生改变。<br>CURLOPT_UPLOAD<br>启用时允许文件传输<br>CURLOPT_VERBOSE<br>启用时会汇报所有的信息，存放在STDERR或指定的CURLOPT_STDERR中<br>CURLOPT_BUFFERSIZE<br>每次获取的数据中读入缓存的大小，这个值每次都会被填满。<br>CURLOPT_CLOSEPOLICY<br>不是CURLCLOSEPOLICY_LEAST_RECENTLY_USED就是CURLCLOSEPOLICY_OLDEST，还存在另外三个，但是curl暂时还不支持。.<br>CURLOPT_CONNECTTIMEOUT<br>在发起连接前等待的时间，如果设置为0，则不等待。<br>CURLOPT_DNS_CACHE_TIMEOUT<br>设置在内存中保存DNS信息的时间，默认为120秒。<br>CURLOPT_FTPSSLAUTH<br>The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide).<br>CURLOPT_HTTP_VERSION<br>设置curl使用的HTTP协议，CURL_HTTP_VERSION_NONE（让curl自己判断），CURL_HTTP_VERSION_1_0（HTTP/1.0），CURL_HTTP_VERSION_1_1（HTTP/1.1）<br>CURLOPT_HTTPAUTH<br>使用的HTTP验证方法，可选的值 有：CURLAUTH_BASIC，CURLAUTH_DIGEST，CURLAUTH_GSSNEGOTIATE，CURLAUTH_NTLM，CURLAUTH_ANY，CURLAUTH_ANYSAFE， 可以使用“|”操作符分隔多个值，curl让服务器选择一个支持最好的值，CURLAUTH_ANY等价于CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM，CURLAUTH_ANYSAFE等价于CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM<br>CURLOPT_INFILESIZE<br>设定上传文件的大小<br>CURLOPT_LOW_SPEED_LIMIT<br>当传输速度小于CURLOPT_LOW_SPEED_LIMIT时，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。<br>CURLOPT_LOW_SPEED_TIME<br>The number of seconds the transfer should be below CURLOPT_LOW_SPEED_LIMIT for PHP to consider the transfer too slow and abort.<br>当传输速度小于CURLOPT_LOW_SPEED_LIMIT时，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。<br>CURLOPT_MAXCONNECTS<br>允许的最大连接数量，超过是会通过CURLOPT_CLOSEPOLICY决定应该停止哪些连接<br>CURLOPT_MAXREDIRS<br>指定最多的HTTP重定向的数量，这个选项是和CURLOPT_FOLLOWLOCATION一起使用的。<br>CURLOPT_PORT<br>一个可选的用来指定连接端口的量<br>CURLOPT_PROXYAUTH<br>The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and CURLAUTH_NTLM are currently supported.<br>CURLOPT_PROXYPORT<br>The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY.<br>CURLOPT_PROXYTYPE<br>Either CURLPROXY_HTTP (default) or CURLPROXY_SOCKS5.<br>CURLOPT_RESUME_FROM<br>在恢复传输时传递一个字节偏移量（用来断点续传）<br>CURLOPT_SSL_VERIFYHOST<br>1 to check the existence of a common name in the SSL peer certificate.<br>2 to check the existence of a common name and also verify that it matches the hostname provided.<br>CURLOPT_SSLVERSION<br>The SSL version (2 or 3) to use. By default PHP will try to determine this itself, although in some cases this must be set manually.<br>CURLOPT_TIMECONDITION<br>如果在CURLOPT_TIMEVALUE指定的某个时间以后被编辑过，则使用CURL_TIMECOND_IFMODSINCE返回页面，如果没有被修 改过，并且CURLOPT_HEADER为true，则返回一个”304 Not Modified”的header，CURLOPT_HEADER为false，则使用CURL_TIMECOND_ISUNMODSINCE，默认值为 CURL_TIMECOND_IFMODSINCE<br>CURLOPT_TIMEOUT<br>设置curl允许执行的最长秒数<br>CURLOPT_TIMEVALUE<br>设置一个CURLOPT_TIMECONDITION使用的时间戳，在默认状态下使用的是CURL_TIMECOND_IFMODSINCE<br>CURLOPT_CAINFO<br>The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER.<br>CURLOPT_CAPATH<br>A directory that holds multiple CA certificates. Use this option alongside CURLOPT_SSL_VERIFYPEER.<br>CURLOPT_COOKIE<br>设定HTTP请求中“Set-Cookie:”部分的内容。<br>CURLOPT_COOKIEFILE<br>包含cookie信息的文件名称，这个cookie文件可以是Netscape格式或者HTTP风格的header信息。<br>CURLOPT_COOKIEJAR<br>连接关闭以后，存放cookie信息的文件名称<br>CURLOPT_CUSTOMREQUEST<br>A custom request method to use instead of “GET” or “HEAD” when doing a HTTP request. This is useful for doing “DELETE” or other, more obscure HTTP requests. Valid values are things like “GET”, “POST”, “CONNECT” and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering “GET /index.html HTTP/1.0\r\n\r\n” would be incorrect.<br>Note: Don’t do this without making sure the server supports the custom request method first.<br>CURLOPT_EGBSOCKET<br>Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket.<br>CURLOPT_ENCODING<br>header中“Accept-Encoding: ”部分的内容，支持的编码格式为：”identity”，”deflate”，”gzip”。如果设置为空字符串，则表示支持所有的编码格式<br>CURLOPT_FTPPORT<br>The value which will be used to get the IP address to use for the FTP “POST” instruction. The “POST” instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain ‘-‘ to use the systems default IP address.<br>CURLOPT_INTERFACE<br>在外部网络接口中使用的名称，可以是一个接口名，IP或者主机名。<br>CURLOPT_KRB4LEVEL<br>KRB4(Kerberos 4)安全级别的设置，可以是一下几个值之一：”clear”，”safe”，”confidential”，”private”。默认的值 为”private”，设置为null的时候表示禁用KRB4，现在KRB4安全仅能在FTP传输中使用。<br>CURLOPT_POSTFIELDS<br>在HTTP中的“POST”操作。如果要传送一个文件，需要一个@开头的文件名<br>CURLOPT_PROXY<br>设置通过的HTTP代理服务器<br>CURLOPT_PROXYUSERPWD<br>连接到代理服务器的，格式为“[username]:[password]”的用户名和密码。<br>CURLOPT_RANDOM_FILE<br>设定存放SSL用到的随机数种子的文件名称<br>CURLOPT_RANGE<br>设置HTTP传输范围，可以用“X-Y”的形式设置一个传输区间，如果有多个HTTP传输，则使用逗号分隔多个值，形如：”X-Y,N-M”。<br>CURLOPT_REFERER<br>设置header中”Referer: “ 部分的值。<br>CURLOPT_SSL_CIPHER_LIST<br>A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.<br>CURLOPT_SSLCERT<br>传递一个包含PEM格式证书的字符串。<br>CURLOPT_SSLCERTPASSWD<br>传递一个包含使用CURLOPT_SSLCERT证书必需的密码。<br>CURLOPT_SSLCERTTYPE<br>The format of the certificate. Supported formats are “PEM” (default), “DER”, and “ENG”.<br>CURLOPT_SSLENGINE<br>The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY.<br>CURLOPT_SSLENGINE_DEFAULT<br>The identifier for the crypto engine used for asymmetric crypto operations.<br>CURLOPT_SSLKEY<br>The name of a file containing a private SSL key.<br>CURLOPT_SSLKEYPASSWD<br>The secret password needed to use the private SSL key specified in CURLOPT_SSLKEY.<br>Note: Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe.<br>CURLOPT_SSLKEYTYPE<br>The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are “PEM” (default), “DER”, and “ENG”.<br>CURLOPT_URL<br>需要获取的URL地址，也可以在PHP的curl_init()函数中设置。<br>CURLOPT_USERAGENT<br>在HTTP请求中包含一个”user-agent”头的字符串。<br>CURLOPT_USERPWD<br>传递一个连接中需要的用户名和密码，格式为：“[username]:[password]”。<br>CURLOPT_HTTP200ALIASES<br>设置不再以error的形式来处理HTTP 200的响应，格式为一个数组。<br>CURLOPT_HTTPHEADER<br>设置一个header中传输内容的数组。<br>CURLOPT_POSTQUOTE<br>An array of FTP commands to execute on the server after the FTP request has been performed.<br>CURLOPT_QUOTE<br>An array of FTP commands to execute on the server prior to the FTP request.<br>CURLOPT_FILE<br>设置输出文件的位置，值是一个资源类型，默认为STDOUT (浏览器)。<br>CURLOPT_INFILE<br>在上传文件的时候需要读取的文件地址，值是一个资源类型。<br>CURLOPT_STDERR<br>设置一个错误输出地址，值是一个资源类型，取代默认的STDERR。<br>CURLOPT_WRITEHEADER<br>设置header部分内容的写入的文件地址，值是一个资源类型。<br>CURLOPT_HEADERFUNCTION<br>设置一个回调函数，这个函数有两个参数，第一个是curl的资源句柄，第二个是输出的header数据。header数据的输出必须依赖这个函数，返回已写入的数据大小。<br>CURLOPT_PASSWDFUNCTION<br>设置一个回调函数，有三个参数，第一个是curl的资源句柄，第二个是一个密码提示符，第三个参数是密码长度允许的最大值。返回密码的值。<br>CURLOPT_READFUNCTION<br>设置一个回调函数，有两个参数，第一个是curl的资源句柄，第二个是读取到的数据。数据读取必须依赖这个函数。返回读取数据的大小，比如0或者EOF。<br>CURLOPT_WRITEFUNCTION<br>设置一个回调函数，有两个参数，第一个是curl的资源句柄，第二个是写入的数据。数据写入必须依赖这个函数。返回精确的已写入数据的大小</p>
<p>curl_copy_handle()函数的作用是拷贝一个curl连接资源的所有内容和参数</p>
<p>$ch = curl_init(“<a href="http://www.baidu.com/" target="_blank" rel="external">http://www.baidu.com/</a>“);<br>$another = curl_copy_handle($ch);<br>curl_exec($another);<br>curl_close($another);<br>curl_error()函数的作用是返回一个包含当前会话错误信息的字符串。<br>curl_errno()函数的作用是返回一个包含当前会话错误信息的数字编号。</p>
<p>curl_multi_init()函数的作用是初始化一个curl批处理句柄资源。<br>curl_multi_add_handle()函数的作用是向curl批处理会话中添加单独的curl句柄资源。curl_multi_add_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。<br>curl_multi_exec()函数的作用是解析一个curl批处理句柄，curl_multi_exec()函数有两个参数，第一个参数表示一个批处理句柄资源，第二个参数是一个引用值的参数，表示剩余需要处理的单个的curl句柄资源数量。<br>curl_multi_remove_handle()函数表示移除curl批处理句柄资源中的某个句柄资源，curl_multi_remove_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。<br>curl_multi_close()函数的作用是关闭一个批处理句柄资源。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ch1</span> = curl_init();</span><br><span class="line"><span class="variable">$ch2</span> = curl_init();</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch1</span>, CURLOPT_URL, <span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch1</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_URL, <span class="string">"http://www.google.com/"</span>);</span><br><span class="line">curl_<span class="built_in">setopt</span>(<span class="variable">$ch2</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$mh</span> = curl_multi_init();</span><br><span class="line">curl_multi_add_handle(<span class="variable">$mh</span>,<span class="variable">$ch1</span>);</span><br><span class="line">curl_multi_add_handle(<span class="variable">$mh</span>,<span class="variable">$ch2</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">curl_multi_<span class="built_in">exec</span>(<span class="variable">$mh</span>,<span class="variable">$flag</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$flag</span> &gt; <span class="number">0</span>);</span><br><span class="line">curl_multi_remove_handle(<span class="variable">$mh</span>,<span class="variable">$ch1</span>);</span><br><span class="line">curl_multi_remove_handle(<span class="variable">$mh</span>,<span class="variable">$ch2</span>);</span><br><span class="line">curl_multi_close(<span class="variable">$mh</span>);</span><br></pre></td></tr></table></figure>
<p>curl_multi_getcontent()函数的作用是在设置了CURLOPT_RETURNTRANSFER的情况下，返回获取的输出的文本流。<br>curl_multi_info_read()函数的作用是获取当前解析的curl的相关传输信息。<br>curl_multi_select()<br>Get all the sockets associated with the cURL extension, which can then be “selected”</p>
]]></content>
    <summary type="html">
    <![CDATA[curl宝典]]>
    
    </summary>
    
      <category term="curl" scheme="http://yoursite.com/tags/curl/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VPN下如何使用SSH连接（greenVPN）]]></title>
    <link href="http://yoursite.com/2015/08/01/VPN%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8SSH/"/>
    <id>http://yoursite.com/2015/08/01/VPN下如何使用SSH/</id>
    <published>2015-07-31T16:21:55.000Z</published>
    <updated>2015-08-15T08:59:10.000Z</updated>
    <content type="html"><![CDATA[<p>环境：ubunut14.04</p>
<p>一直用greenVPN做代理，但是有一个问题，就是green把SSH给封了，导致连接VPN的时候，SSH无法连接远程服务器，那可如何是好，恐怕只有一条路了，就是让这些IP绕过VPN。</p>
<p>绕之前我们先<code>route</code>一下，看看使用VPN前后的网络变化：</p>
<p><strong><em>before</em></strong></p>
<table>
<thead>
<tr>
<th>Destination</th>
<th>Gateway</th>
<th>Genmask</th>
<th>Flags</th>
<th>Metric</th>
<th>Ref</th>
<th>Use</th>
<th>Iface</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>localhost</td>
<td>0.0.0.0</td>
<td>UG</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>192.168.1.0</td>
<td>*</td>
<td>255.255.255.0</td>
<td>U</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><em>连接VPN前默认路由均由wlan0接管</em></p>
<p><strong><em>after</em></strong></p>
<table>
<thead>
<tr>
<th>Destination</th>
<th>Gateway</th>
<th>Genmask</th>
<th>Flags</th>
<th>Metric</th>
<th>Ref</th>
<th>Use</th>
<th>Iface</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>*</td>
<td>0.0.0.0</td>
<td>U</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>ppp0</td>
</tr>
<tr>
<td>10.0.6.4</td>
<td>*</td>
<td>255.255.255.255</td>
<td>UH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>ppp0</td>
</tr>
<tr>
<td>119.81.158.84-s</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>119.81.158.84-s</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>192.168.1.0</td>
<td>*</td>
<td>255.255.255.0</td>
<td>U</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
</tbody>
</table>
<p><em>连接VPN后默认路由均由ppp0(VPN网络)接管，但是指定规则静态路由不走VPN，且路由规则里静态路由优先级高于默认路由</em></p>
<p>所以，我们可以通过设置一条静态路由，来使SSH连接的IP通过指定网络转发：</p>
<pre><code>sudo route add -net <span class="keyword">*</span>.<span class="keyword">*</span>.<span class="keyword">*</span>.<span class="keyword">*</span> netmask 255.255.255.255 gw 192.168.1.1 dev wlan0
</code></pre><ul>
<li><h5 id="dev_wlan_0可以不写，程序会自动匹配正在是用的非VPN网路"><em><code>dev wlan 0</code>可以不写，程序会自动匹配正在是用的非VPN网路</em></h5></li>
</ul>
<p>上面的路由规则只是临时生效，重启电脑或者重启网络，甚至断开VPN都会被清除。当然你可以说通过配置永久路有的方式，来避免重启电脑造成的路由配置丢失（具体参考搜索引擎），但是我在实际操作中却发现，当断开VPN时，会刷新路由，依然会造成配置的永久路由丢失。</p>
<p>于是，我就采取了另一种方式，就是监控VPN连接，一旦VPN连接，即触发如下代码，将代码置于<code>/etc/ppp/ip-up.d/setStaticRoute</code>内，我的文件名是 <code>setStaticRoute</code>，自己随便取：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$IFNAME</span>"</span> = <span class="string">"ppp0"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">route add -net *.*.*.* netmask <span class="number">255.255</span>.<span class="number">255.255</span> gw <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line">route add -net *.*.*.* netmask <span class="number">255.255</span>.<span class="number">255.255</span> gw <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>最后路由结果是这样(<code>*.*.*.*</code>部分是SSH要连接的服务器地址)：</p>
<table>
<thead>
<tr>
<th>Destination</th>
<th>Gateway</th>
<th>Genmask</th>
<th>Flags</th>
<th>Metric</th>
<th>Ref</th>
<th>Use</th>
<th>Iface</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>*</td>
<td>0.0.0.0</td>
<td>U</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>ppp0</td>
</tr>
<tr>
<td>10.0.6.4</td>
<td>*</td>
<td>255.255.255.255</td>
<td>UH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>ppp0</td>
</tr>
<tr>
<td>*.*.*.*</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>119.81.158.84-s</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>119.81.158.84-s</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>*.*.*.*</td>
<td>192.168.1.1</td>
<td>255.255.255.255</td>
<td>UGH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
<tr>
<td>192.168.1.0</td>
<td>*</td>
<td>255.255.255.0</td>
<td>U</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>wlan0</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[配置静态路由绕过VPN]]>
    
    </summary>
    
      <category term="ROUTE" scheme="http://yoursite.com/tags/ROUTE/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
      <category term="VPN" scheme="http://yoursite.com/tags/VPN/"/>
    
      <category term="VPN" scheme="http://yoursite.com/categories/VPN/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2MVC应用]]></title>
    <link href="http://yoursite.com/2015/07/26/yii2MVC%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2015/07/26/yii2MVC应用/</id>
    <published>2015-07-26T04:05:49.000Z</published>
    <updated>2015-08-15T09:00:19.000Z</updated>
    <content type="html"><![CDATA[<p>MVC是应用中常用的组织架构，对于一些基础的东西这里不做赘述，只介绍一些不是很常用的但是颇有裨益的内容，希望在以后的开发中能够加以运用。</p>
<h2 id="Controller"><strong>Controller</strong></h2><p>controller主要负责接收请求数据并转发给model层处理，然后将返回值交给view层展现给用户。</p>
<h3 id="独立actions(standalone_actions)"><strong>独立actions(standalone actions)</strong></h3><p>satandalone actions 是指独立于controller的单独的一个action，一般负责一个独立功能，这个功能会被多方复用，比如获取验证码的captcha，捕获错误error。此类action需继承自<code>yii\base\Action</code>或是其子类，并实现其<code>run()</code>方法。<br><a id="more"></a><br>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">frontend</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Action</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">extends</span> <span class="title">Action</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'HelloWorld'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过如下方式在<code>siteController</code>里调用：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> *<span class="phpdoc"> @inheritdoc</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'helloWorld'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'frontend\controllers\HelloWorldAction'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过如下方式访问：</p>
<pre><code><span class="string">http:</span><span class="comment">//www.yii2test.com/site/helloWorld</span>
</code></pre><p>返回：HelloWorld</p>
<h3 id="最佳设计"><strong>最佳设计</strong></h3><p>在一个设计良好的应用中，controllers通长是比较简洁的，每个action仅包含少量代码。如果你的controller相当复杂，通常意味着你需要重构这部分代码，将一部分代码转移到其他类中。<br>下面是一些针对controllers的好的建议：</p>
<ul>
<li>接收请求数据</li>
<li>调用models或其他服务组件来处理请求数据</li>
<li>通过views展示数据</li>
<li>不在controllers处理请求数据，应当交由model层处理</li>
<li>避免嵌入html或其他表述型代码，这部分应当放到view层</li>
</ul>
<h2 id="Models"><strong>Models</strong></h2><h3 id="场景(Scenarios)"><strong>场景(Scenarios)</strong></h3><p>scenarios特性主要用在验证（validation）和属性批量分配（massive assignment）上，当然也可用在其他方面，根据不同的scenario采用不同的属性标签（attribute labels）。</p>
<p>可以通过一下两种方式为model设定scenario：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. scenario is set as a property</span></span><br><span class="line"><span class="variable">$model</span> = <span class="keyword">new</span> User;</span><br><span class="line"><span class="variable">$model</span>-&gt;scenario = User::SCENARIO_LOGIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. scenario is set throught configuration</span></span><br><span class="line"><span class="variable">$model</span> = <span class="keyword">new</span> User([<span class="string">'scenario'</span> =&gt; User::SCENARIO_LOGIN]);</span><br></pre></td></tr></table></figure>
<p>默认情况下，scenario是依赖于model里定义的validation rules的，如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// username, email and password are all required in "register" scenario</span></span><br><span class="line">        [[<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>], <span class="string">'required'</span>, <span class="string">'on'</span> =&gt; <span class="keyword">self</span>::SCENARIO_REGISTER],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// username and password are required in "login" scenario</span></span><br><span class="line">        [[<span class="string">'username'</span>, <span class="string">'password'</span>], <span class="string">'required'</span>, <span class="string">'on'</span> =&gt; <span class="keyword">self</span>::SCENARIO_LOGIN],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，我们可通过重写<code>yii\base\Model::scenarios()</code>方法来自定义scenario：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> SCENARIO_LOGIN = <span class="string">'login'</span>;</span><br><span class="line">    <span class="keyword">const</span> SCENARIO_REGISTER = <span class="string">'register'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="keyword">self</span>::SCENARIO_LOGIN =&gt; [<span class="string">'username'</span>, <span class="string">'password'</span>],</span><br><span class="line">            <span class="keyword">self</span>::SCENARIO_REGISTER =&gt; [<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认的<code>scenarios()</code>接口，会返回所有validation rules里声明的所有scenarios，当重写<code>scenarios()</code>时，如果你想添加新的scenarios到默认的场景中，可以遵循如下形式：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> SCENARIO_LOGIN = <span class="string">'login'</span>;</span><br><span class="line">    <span class="keyword">const</span> SCENARIO_REGISTER = <span class="string">'register'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$scenarios</span> = <span class="keyword">parent</span>::scenarios();</span><br><span class="line">        <span class="variable">$scenarios</span>[<span class="keyword">self</span>::SCENARIO_LOGIN] = [<span class="string">'username'</span>, <span class="string">'password'</span>];</span><br><span class="line">        <span class="variable">$scenarios</span>[<span class="keyword">self</span>::SCENARIO_REGISTER] = [<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$scenarios</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="验证规则（validation_rules）"><strong>验证规则（validation rules）</strong></h3><p>验证规则主要用来的字段属性验证。如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// the name, email, subject and body attributes are required</span></span><br><span class="line">        [[<span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'subject'</span>, <span class="string">'body'</span>], <span class="string">'required'</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the email attribute should be a valid email address</span></span><br><span class="line">        [<span class="string">'email'</span>, <span class="string">'email'</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="批量分发（Massive_Assignment）"><strong>批量分发（Massive Assignment）</strong></h3><p>批量分发只应用于当前scenario下所列的<em>safe attributes</em>。如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declared in scenario</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="keyword">self</span>::SCENARIO_LOGIN =&gt; [<span class="string">'username'</span>, <span class="string">'password'</span>],</span><br><span class="line">        <span class="keyword">self</span>::SCENARIO_REGISTER =&gt; [<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declared in rules</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [[<span class="string">'title'</span>, <span class="string">'description'</span>], <span class="string">'safe'</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>unsafe attributes</em>则无法做到批量分发，如下面加<code>！</code>的属性：</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scenarios</span><span class="params">()</span>
</span>{
    <span class="keyword">return</span> [
        <span class="keyword">self</span>::SCENARIO_LOGIN =&gt; [<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'!secret'</span>],
    ];
}
</code></pre><h2 id="Views"><strong>Views</strong></h2><p>views主要通过controllers渲染并展示相关数据，这里主要讲一下<code>renderAjax()</code>如何应用，其实通过名字就可看出来，这是一个应用在ajax刷新时用的渲染方法。<br>基于此，首先要了解ajax的相关基础，我们知道，ajax是用来进行网页局部刷新的，<code>dataType</code>有四种形式<code>json,xml,script,html</code>,正是由于其可以传递html格式字符串，我们就可以个通过<code>renderAjax</code>渲染一个包含注册JS和CSS的局部文件（不包含layout），并返回给ajax请求，再通过ajax将代码插入到当前页面中，但面对大段ajax请求时，如此操作比单纯请求json数据，然后通过dom方式操作将返回数据写入的页面的方法更易维护。<br>下面通过代码讲一下实现方式（这里直通过controller和view简单叙述一下原理）：</p>
<ul>
<li><p><strong>controller</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">        *渲染主页面</span><br><span class="line">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="variable">$myName</span> = <span class="string">'张三'</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="string">'index'</span>, [<span class="string">'name'</span>=&gt;<span class="variable">$myName</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">        *ajax刷新</span><br><span class="line">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionRenderAjax</span><span class="params">()</span></span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="variable">$newName</span> = <span class="string">'李四'</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;renderAjax(<span class="string">'_newName'</span>, [<span class="string">'newName'</span>=&gt;<span class="variable">$newName</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>views(包含两部分：主页面，renderAjax渲染页面)</strong><br><strong><em>主页面(index)</em></strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">'#newName'</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            url: <span class="string">'/site/renderAjax'</span>,</span><br><span class="line">            dataType: <span class="string">'html'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="params">(html)</span> </span>&#123;</span><br><span class="line">                $(<span class="string">'#myName'</span>).html = html;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="php"><span class="preprocessor">&lt;?</span>= <span class="variable">$name</span> <span class="preprocessor">?&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"NewName"</span> <span class="attribute">id</span>=<span class="value">"newName"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong><em>ajax页（_newName）</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="php"><span class="preprocessor">&lt;?</span>= <span class="variable">$newName</span> <span class="preprocessor">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样通过点击<strong>NewName</strong>按钮就可将name刷新为newName。在应对一些复杂页面的时候会比较好用。</p>
]]></content>
    <summary type="html">
    <![CDATA[yii2中的MVC]]>
    
    </summary>
    
      <category term="MVC" scheme="http://yoursite.com/tags/MVC/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
      <category term="yii2" scheme="http://yoursite.com/categories/yii2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2入口文件：Web Applications 和 Console Applications]]></title>
    <link href="http://yoursite.com/2015/07/21/yii2%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%EF%BC%9AWeb-Applications-%E5%92%8C-Console-Applications/"/>
    <id>http://yoursite.com/2015/07/21/yii2入口文件：Web-Applications-和-Console-Applications/</id>
    <published>2015-07-21T13:40:35.000Z</published>
    <updated>2015-08-29T11:21:04.000Z</updated>
    <content type="html"><![CDATA[<p>　　yii框架中通常包含两类入口文件，一类是针对用户的web入口，一类是针对命令行的控制台入口。要注意两个入口的一致性，否则可能在命令行层面造成相关全局常量或函数的引用缺失。</p>
<h2 id="入口文件"><strong>入口文件</strong></h2><ul>
<li><p>通常用来定义全局常量：如debug调用，当前运行环境</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="literal">or</span> <span class="class"><span class="keyword">define</span></span>(<span class="string">'YIII_DEBUG'</span>, <span class="literal">true</span>);</span><br><span class="line">defined(<span class="string">'YII_DEV'</span>) <span class="literal">or</span> <span class="class"><span class="keyword">define</span></span>(<span class="string">'YII_DEV'</span>, <span class="string">'dev'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册自动加载函数（composer autoloader）</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require<span class="list">(<span class="keyword">__DIR__</span> . <span class="quoted">'/</span>../vender/autoload.php')</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加载Yii类文件</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require<span class="list">(<span class="keyword">__DIR__</span> . <span class="quoted">'/</span>../vender/yiisoft/yii2/yii.php')</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加载应用配置</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../config/web.php'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用<code>yii\base\Application::run()</code>处理请求</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$application</span> <span class="subst">=</span> <span class="literal">new</span> yii<span class="subst">\</span>web<span class="subst">\</span>Application(<span class="variable">$config</span>);</span><br><span class="line"><span class="variable">$application</span><span class="subst">-&gt;</span>run();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<p><strong> <em> 大致形式如下 </em> </strong> (<em> 其中部分内容会在后面深入分析 </em>)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../vendor/autoload.php'</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../vendor/yiisoft/yii2/Yii.php'</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../common/config/bootstrap.php'</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../config/bootstrap.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$config</span> = yii\helpers\ArrayHelper::merge(</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../common/config/main.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../common/config/main-local.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../config/main.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../config/main-local.php'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$application</span> = <span class="keyword">new</span> yii\web\Application(<span class="variable">$config</span>);</span><br><span class="line"><span class="variable">$application</span>-&gt;run();</span><br></pre></td></tr></table></figure>
<h2 id="关于Application"><strong> 关于Application </strong></h2><p>当入口文件创建应用时，会相应的引入相关文件，加载各种配置。下面会介绍一些相关应用的配置，及主要属性。<br>其中主要部分是上文实例中载入的的<strong>main.php</strong>所包含的相关属性。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$params</span> = array_merge(</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../common/config/params.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../../common/config/params-local.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/params.php'</span>),</span><br><span class="line">    <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/params-local.php'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="string">'app-frontend'</span>,</span><br><span class="line">    <span class="string">'basePath'</span> =&gt; dirname(<span class="keyword">__DIR__</span>),</span><br><span class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</span><br><span class="line">    <span class="string">'controllerNamespace'</span> =&gt; <span class="string">'frontend\controllers'</span>,</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'urlManager'</span>=&gt;[</span><br><span class="line">            <span class="string">'enablePrettyUrl'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">            <span class="string">'showScriptName'</span>=&gt;<span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'enableStrictParsing'</span>=&gt;<span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'rules'</span>=&gt;[</span><br><span class="line">                <span class="string">'&lt;controller:&lt;\w+&gt;&gt;/&lt;action:&lt;\w+&gt;&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/&lt;action&gt;'</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'user'</span> =&gt; [</span><br><span class="line">            <span class="string">'identityClass'</span> =&gt; <span class="string">'common\models\User'</span>,</span><br><span class="line">            <span class="string">'enableAutoLogin'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'log'</span> =&gt; [</span><br><span class="line">            <span class="string">'traceLevel'</span> =&gt; YII_DEBUG ? <span class="number">3</span> : <span class="number">0</span>,</span><br><span class="line">            <span class="string">'targets'</span> =&gt; [</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'params'</span> =&gt; <span class="variable">$params</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><br>依据上述文件，下面将分别介绍其<strong>必备属性</strong>、<strong>很重要的属性</strong>、<strong>不重要，但也很有用的属性</strong>、<strong>应用级事件</strong>、<strong>应用生命周期图</strong>。</p>
<h3 id="必备属性"><strong> 必备属性 </strong></h3><p><strong> <em>id</em> </strong></p>
<p>如上所示，这里的id（最好由字母数字组成）具有绝对唯一性，主要用来区分不同应用。</p>
<p><strong> <em>basePath</em> </strong></p>
<p>basePath是指当前应用所在的根目录，可以通过文件目录（/path/to/path1）或别名形式。这里着重提一下别名形式，Yii里预定义了一个别名来代指根目录<code>@app</code>，可以用它来派生其他目录，如记录程序执行日志的<code>@app/runtime</code>文件目录。</p>
<h3 id="很重要的属性(这里只介绍几个比较有意思的)"><strong> 很重要的属性(这里只介绍几个比较有意思的) </strong></h3><p><strong> <em>aliases</em> </strong></p>
<p>此属性允许我们通过配置文件以array的形式定义一个alias集合。避免在应用的到处调用<code>Yii::setAlias()</code>，还方便统一管理。<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="symbol">'aliases'</span> =&gt; [</span><br><span class="line">        <span class="char">'@name1'</span> =&gt; <span class="symbol">'path</span>/<span class="keyword">to</span>/path1',</span><br><span class="line">        <span class="char">'@name2'</span> =&gt; <span class="symbol">'path</span>/<span class="keyword">to</span>/path2',</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><strong> <em>catchAll</em> </strong></p>
<p>利用这个属性，我们可以在哪天需要关闭系统，但又要给用户一个页面告知用户关闭原因时，为所有请求形成一个统一的入口，指向我们的告用户界面。<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="symbol">'catchAll'</span> =&gt; [</span><br><span class="line">        <span class="symbol">'offline</span>/notice',</span><br><span class="line">        <span class="symbol">'param1'</span> =&gt; <span class="symbol">'value1'</span>,</span><br><span class="line">        <span class="symbol">'param2'</span> =&gt; <span class="symbol">'value2'</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><strong> <em>components</em> </strong></p>
<p>非常非常重要，主要用来注册一些应用组件，放在<strong>Application Components</strong>篇里详细讲解。</p>
<p><strong> <em>controllerNamespace</em> </strong></p>
<p>自从php5.3引入类似java，c++，python的命名空间的概念后，感觉真的是好用了很多，只是为了向下兼容，反斜杠<code>/</code>的应用可能让人觉得有些怪诞。</p>
<p>回归主题，这个属性规定了controller类的默认命名空间，通过他亦可以解析子级目录下的controller，例如：某个controller ID为<code>admin/post</code>， 那么解析为 <code>app\controllers\admin\PostController</code>。</p>
<p><strong> <em>modules</em> </strong></p>
<p>这个属性指定了程序包含的模块（modules:一个位于已有MVC应用内，亦包含完整MVC结构的模块）。在<strong>modules</strong>章节详细分析。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'modules'</span> =&gt; [</span><br><span class="line">        <span class="comment">// a "booking" module specified with the module class</span></span><br><span class="line">        <span class="string">'booking'</span> =&gt; <span class="string">'app\modules\booking\BookingModule'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a "comment" module specified with a configuration array</span></span><br><span class="line">        <span class="string">'comment'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'app\modules\comment\CommentModule'</span>,</span><br><span class="line">            <span class="string">'db'</span> =&gt; <span class="string">'db'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><strong> <em>timeZone</em> </strong></p>
<p>当配置这个属性后，应用实际上会调用PHP的内置函数<code>date_default_timezone_set()</code>来设置时区。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'timeZone'</span> =&gt; <span class="string">'zh/Shanghai'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h3 id="不重要，但也很有用的属性"><strong> 不重要，但也很有用的属性 </strong></h3><p><a href="http://www.yiiframework.com/doc-2.0/guide-structure-applications.html" target="_blank" rel="external">详见文档</a></p>
<h3 id="应用级事件（全局的，顶层的，不局限于某处）"><strong> 应用级事件（全局的，顶层的，不局限于某处） </strong></h3><p>在一个请求处理周期内，应用会触发若干事件，其中会有下面四个应用级事件：</p>
<ul>
<li><p><strong>EVENT_BEFORE_REQUEST</strong> (应用处理请求之前触发的事件)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'on beforeRequest'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$event</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>EVENT_AFTER_REQUEST</strong> (应用处理请求完成后，响应发送之前，触发的事件)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'on afterRequest'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$event</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>EVENT_BEFORE_REQUEST</strong> (任何一个controller 的 action 运行之前，其参数<code>$event</code>是<code>yii\base\ActionEvent</code>的一个实例)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'on beforeAction'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$event</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (some condition) &#123;</span><br><span class="line">            <span class="variable">$event</span>-&gt;isValid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>EVENT_AFTER_ACTION</strong> (任何一个controller 的 action 运行完成之后，其参数<code>$event</code>是<code>yii\base\ActionEvent</code>的一个实例)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'on afterAction'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$event</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (some condition) &#123;</span><br><span class="line">            <span class="variable">$event</span>-&gt;isValid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="应用生命周期图（Application_Lifecycle）"><strong> 应用生命周期图（Application Lifecycle） </strong></h3><p><img src="http://www.yiiframework.com/doc-2.0/images/application-lifecycle.png" alt="Application Lifecycle" title="应用生命周期图"></p>
]]></content>
    <summary type="html">
    <![CDATA[yii2入口文件配置]]>
    
    </summary>
    
      <category term="yii2" scheme="http://yoursite.com/tags/yii2/"/>
    
      <category term="yii2" scheme="http://yoursite.com/categories/yii2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小技巧-MySQL时间字段设置默认及自动更新]]></title>
    <link href="http://yoursite.com/2015/07/21/%E5%B0%8F%E6%8A%80%E5%B7%A7-MySQL%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%8F%8A%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2015/07/21/小技巧-MySQL时间字段设置默认及自动更新/</id>
    <published>2015-07-21T02:12:36.000Z</published>
    <updated>2015-08-15T08:59:02.000Z</updated>
    <content type="html"><![CDATA[<p>设置默认创建时间</p>
<pre><code><span class="string">`create_time`</span> timstamp <span class="literal">NOT</span> <span class="built_in">NULL</span> DEFAULT CURRENT_TIMESTAMP COMMENT <span class="string">'创建时间'</span>
</code></pre><p>设置默认更新时间并在修改时自动更新</p>
<pre><code><span class="string">`update_time`</span> timstamp <span class="literal">NOT</span> <span class="built_in">NULL</span> DEFAULT CURRENT_TIMESTAMP <span class="keyword">ON</span> UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'修改日期'</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[mysql默认时间设置]]>
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redis 批量插入]]></title>
    <link href="http://yoursite.com/2015/07/19/Redis-%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    <id>http://yoursite.com/2015/07/19/Redis-批量插入/</id>
    <published>2015-07-19T10:43:43.000Z</published>
    <updated>2015-08-15T08:59:09.000Z</updated>
    <content type="html"><![CDATA[<p>有时候，一些redis用例需要在短时间内插入大量已有或由用户临时生成的数据，导致百万级的键-值对需要在尽可能短的时间内创建。</p>
<p>这就称作<em>批量插入</em>，这篇文档的目的就是探讨如何尽可能快的向redis插入数据。</p>
<h3 id="使用protocol"><strong> <em>使用protocol</em> </strong></h3><p>因为某些原因，通过一个普通的redis客户端来实现数据的批量插入并不可取，比如：一个很小白的方式就是一个命令接一个命令的发送，这样会很慢，因为每个命令都会消耗一个回路时间（因为redis是一个client-server模式的应用，客户端和服务器可能隔了十万八千里）。这种情况也许可以通过使用管道方式（<a href="http://redis.io/topics/pipelining" target="_blank" rel="external">pipeling</a>）来解决，但是对于大量数据的批量插入，往往需要读取返回值的同时创建新命令，还要确保尽可能快的插入。<br><a id="more"></a><br>只有少量的客户端支持非阻塞I/O（貌似是说大多数redis客户端是单线程的），并且并不是所有的客户端都有能力以一种有效的方式解析返回数据以实现吞吐量的最大化。由于上面的一些原因，向redis批量插入数据的首选方式便是生成一个包含redis协议的文件，以RAW（一个没有被NT文件系统（FAT或NTFS）格式化的磁盘分区）形式格式化，以便调用相关的命令插入请求数据。</p>
<p>举例来说，我需要生成大量的set格式数据，其中包含数以亿计的’keyN-&gt;valueN’形式的键值，我会创建一个基于Redis协议格式的包含如下命令的文件：</p>
<pre><code><span class="built_in">SET</span> Key0 Value0
<span class="built_in">SET</span> Key1 Value1
<span class="attribute">...</span>
<span class="built_in">SET</span> KeyN ValueN
</code></pre><p><em>注意：<br>　　用shell组成上面格式的数据后，用redis-cli —pipe方式导入，报如下错误<br>　　All data transferred. Waiting for the last reply…<br>　　ERR syntax error<br>　　Last reply received from server.<br>　　errors: 1, replies: 1<br>　　经调查是因为linux文档的换行是\n,但文档要求每行的结尾是\r\n.<br>　　最后用unix2dos命令将文件转换后，再执行redis-cli —pipe，不再出现错误</em></p>
<p>一旦文件创建，接下来的事情就是尽可能快的插入到 Redis 里。过去的实现方式，是使用如下 netcat 命令：</p>
<pre><code>(cat data.txt; sleep <span class="number">10</span>) | nc localhost <span class="number">6379</span> &gt; <span class="regexp">/dev/</span><span class="keyword">null</span>
</code></pre><p>然而这并不是一个实现数据批量插入的可靠方式，是因为 necat 无法确切的知道数据何时传输完毕，并且不能查错。在2.6或者以后的Redis版本里，客户端可以支持一种叫做管道模式（ pipe mode ）的新模式，用来处理批量插入。</p>
<p>可以使用类似下面的pipe model 命令：</p>
<pre><code><span class="title">cat</span> <span class="typedef"><span class="keyword">data</span>.txt | redis-cli <span class="comment">--pipe</span></span>
</code></pre><p>会产生如下类似输出：</p>
<pre><code>All data transferred. Waiting <span class="keyword">for</span> <span class="operator">the</span> <span class="keyword">last</span> reply...
Last reply recived <span class="built_in">from</span> server.
Erroe: <span class="number">0</span>, replies: <span class="number">100000</span>
</code></pre><p>拥有这种模式的redis-cli同时会确保只把从Redis服务收到的错误信息输出。</p>
<h3 id="Redis_protocol的生成"><strong> <em>Redis protocol的生成</em> </strong></h3><p>Redis协议生成和解析都是十分简单的，参考文档请点击<a href="http://redis.io/topics/protocol" target="_blank" rel="external">这里</a>。然而你并不需要理解为批量插入而生成的协议的每个细节，其中的每个命令仅以如下方式呈现：</p>
<pre><code><span class="keyword">*</span><span class="variable">&lt;args&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
$<span class="variable">&lt;len&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args0&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args1&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">&lt;args2&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
...
<span class="variable">&lt;argsN&gt;</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
</code></pre><p>这里的<code>&lt;cr&gt;</code>代表”\r”(或者是ASII码 13)， <code>&lt;lf&gt;</code>代表”\n”(或者是ASII码 10)。</p>
<p>举个例子，<strong>SET key value</strong>命令可以用一下协议表示：</p>
<pre><code>*<span class="number">3</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$3</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
SET<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$4</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
name<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
<span class="variable">$5</span><span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
lunar<span class="variable">&lt;cr&gt;</span><span class="variable">&lt;lf&gt;</span>
</code></pre><p><em>格式说明：</em><br>　　*<em>3 #表示有3个参数<br>　　$3 #表示“参数”有三个字节<br>　　SET #执行的命令<br>　　$34 # key有 4个字节<br>　　name #key对应的值<br>　　$5 #field对应的长度<br>　　lunar #field对应的值<br>　　每行默认以 \r\n 结尾<br>　　同时在执行完一行后，以 \r\n 代码一条语句结束</em></p>
<p>或者用一串字符串来表示：</p>
<pre><code>"*3<span class="command">\r</span><span class="command">\n</span><span class="formula">$3<span class="command">\r</span><span class="command">\nSET</span><span class="command">\r</span><span class="command">\n</span>$</span>3<span class="command">\r</span><span class="command">\nkey</span><span class="command">\r</span><span class="command">\n</span><span class="formula">$5<span class="command">\r</span><span class="command">\nvalue</span><span class="command">\r</span><span class="command">\n</span>"</span>
</code></pre><p>你生成的用于批量插入的文件，就是由上面的命令一个接一个的构成的。</p>
<p>下面的Ruby函数可以用来生成一个有效的协议：</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">gen_redis_proto</span></span>(*cmd)
    proto = <span class="string">""</span>
    proto &lt;&lt; <span class="string">"*"</span> + cmd.lenght.to_s + <span class="string">"\r\n"</span>
    cmd.each{|arg|
        proto &lt;&lt; <span class="string">"$"</span> + arg.to_s.bytesize.to_s +<span class="string">"\r\n"</span>
        proto &lt;&lt; arg.to_s + <span class="string">"\r\n"</span>
    }
    proto
<span class="keyword">end</span>
puts gen_redis_proto(<span class="string">"SET"</span>, <span class="string">"mykey"</span>, <span class="string">"Hello World!"</span>).inspect
</code></pre><p>使用上述方法我们可以很容易的生成上述键值对，函数用法如下：</p>
<pre><code>(<span class="number">0.</span>..<span class="number">1000</span>).each{|n|
    STDOUT.write(gen_redis_proto(<span class="string">"SET"</span>, <span class="string">"mykey<span class="subst">#{n}</span>"</span>, <span class="string">"Hello World<span class="subst">#{n}</span>"</span>))
}
</code></pre><p>我们可以通过redis-cli的pipe直接执行上述程序，来实现大规模导入。</p>
<pre><code>$ ruby proto.rb | redis-cli <span class="comment">--pipe</span>
All data transferred. Waiting <span class="keyword">for</span> <span class="operator">the</span> <span class="keyword">last</span> reply...
Last reply received <span class="built_in">from</span> server.
errors: <span class="number">0</span>, replies: <span class="number">1000</span>
</code></pre><h3 id="Redis引擎下_pipe_mode_是怎样工作的"><strong> <em>Redis引擎下 pipe mode 是怎样工作的</em> </strong></h3><p>redis-cli内置的 pipe mode 的神奇之处在于，能够像netcat一样快，与此同时还能捕捉到服务器返回的最后一条数据。</p>
<p>好处如下：</p>
<ul>
<li><code>redis-cli --pipe</code> 尝试尽可能快的向服务器发送数据。</li>
<li>同时读取可用数据并解析。</li>
<li>一旦输出接口没有多余的可读数据，它就发送一个20bytes长度特殊<em>ECHO</em>命令：我们可以确定这就是最后一个命令，如果我们收到了一个同样的20bytes的返回值，我们就可以匹配到这个检测用的返回值。</li>
<li>一旦这个特殊命令发送，返回值接收代码就会匹配这个20bytes的返回值，一旦匹配成功就可以退出进程。</li>
</ul>
<p>使用这个方法，我们就不需要解析为了统计命令数量而发送到服务器的协议，而是紧紧解析返回值。</p>
<p>然而，我们还是设置了一个计数器，来统计解析的返回值数量，以便告诉用户有多少条命令发送到服务器。</p>
]]></content>
    <summary type="html">
    <![CDATA[redis批量插入]]>
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php7]]></title>
    <link href="http://yoursite.com/2015/07/19/php7/"/>
    <id>http://yoursite.com/2015/07/19/php7/</id>
    <published>2015-07-19T10:20:07.000Z</published>
    <updated>2015-08-15T08:59:15.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="php7" scheme="http://yoursite.com/categories/php7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随笔]]></title>
    <link href="http://yoursite.com/2015/07/19/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2015/07/19/随笔/</id>
    <published>2015-07-19T09:58:06.000Z</published>
    <updated>2015-08-15T08:59:04.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python]]></title>
    <link href="http://yoursite.com/2015/07/19/python/"/>
    <id>http://yoursite.com/2015/07/19/python/</id>
    <published>2015-07-19T09:57:28.000Z</published>
    <updated>2015-08-15T08:59:16.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis]]></title>
    <link href="http://yoursite.com/2015/07/19/redis/"/>
    <id>http://yoursite.com/2015/07/19/redis/</id>
    <published>2015-07-19T09:57:15.000Z</published>
    <updated>2015-08-15T08:59:17.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[yii2]]></title>
    <link href="http://yoursite.com/2015/07/19/yii2/"/>
    <id>http://yoursite.com/2015/07/19/yii2/</id>
    <published>2015-07-19T09:56:02.000Z</published>
    <updated>2015-08-02T05:26:27.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="yii2" scheme="http://yoursite.com/categories/yii2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql]]></title>
    <link href="http://yoursite.com/2015/07/19/mysql/"/>
    <id>http://yoursite.com/2015/07/19/mysql/</id>
    <published>2015-07-19T09:55:46.000Z</published>
    <updated>2015-08-15T08:59:14.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php]]></title>
    <link href="http://yoursite.com/2015/07/19/php5/"/>
    <id>http://yoursite.com/2015/07/19/php5/</id>
    <published>2015-07-19T09:55:28.000Z</published>
    <updated>2015-08-15T08:59:14.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
  </entry>
  
</feed>